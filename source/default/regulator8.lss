
regulator8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00001eb0  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800190  00800190  00002094  2**0
                  ALLOC
  3 .eeprom       00000012  00810000  00810000  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a2c  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000214  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000260  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000666  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003af2  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a39  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002a32  00000000  00000000  00008ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000480  00000000  00000000  0000b50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000077d  00000000  00000000  0000b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001617  00000000  00000000  0000c109  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000084a  00000000  00000000  0000d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  0000df6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 eb       	ldi	r30, 0xB0	; 176
      3a:	fe e1       	ldi	r31, 0x1E	; 30
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 39       	cpi	r26, 0x90	; 144
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a0 e9       	ldi	r26, 0x90	; 144
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ae 3d       	cpi	r26, 0xDE	; 222
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	c4 d3       	rcall	.+1928   	; 0x7e2 <main>
      5a:	28 cf       	rjmp	.-432    	; 0xfffffeac <__eeprom_end+0xff7efe9a>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <DoWork>:
	}
	return 0;
}

void DoWork()
{
      5e:	6f 92       	push	r6
      60:	7f 92       	push	r7
      62:	8f 92       	push	r8
      64:	9f 92       	push	r9
      66:	af 92       	push	r10
      68:	bf 92       	push	r11
      6a:	cf 92       	push	r12
      6c:	df 92       	push	r13
      6e:	ef 92       	push	r14
      70:	ff 92       	push	r15
      72:	0f 93       	push	r16
      74:	1f 93       	push	r17

	//LCD_Clear_Display();
	if (iterations%12000!=0)
      76:	e0 90 92 01 	lds	r14, 0x0192
      7a:	f0 90 93 01 	lds	r15, 0x0193
      7e:	00 91 94 01 	lds	r16, 0x0194
      82:	10 91 95 01 	lds	r17, 0x0195
      86:	c8 01       	movw	r24, r16
      88:	b7 01       	movw	r22, r14
      8a:	20 ee       	ldi	r18, 0xE0	; 224
      8c:	3e e2       	ldi	r19, 0x2E	; 46
      8e:	40 e0       	ldi	r20, 0x00	; 0
      90:	50 e0       	ldi	r21, 0x00	; 0
      92:	7c de       	rcall	.-776    	; 0xfffffd8c <__eeprom_end+0xff7efd7a>
      94:	61 15       	cp	r22, r1
      96:	71 05       	cpc	r23, r1
      98:	81 05       	cpc	r24, r1
      9a:	91 05       	cpc	r25, r1
      9c:	71 f0       	breq	.+28     	; 0xba <DoWork+0x5c>
		{
			iterations++;
      9e:	08 94       	sec
      a0:	e1 1c       	adc	r14, r1
      a2:	f1 1c       	adc	r15, r1
      a4:	01 1d       	adc	r16, r1
      a6:	11 1d       	adc	r17, r1
      a8:	e0 92 92 01 	sts	0x0192, r14
      ac:	f0 92 93 01 	sts	0x0193, r15
      b0:	00 93 94 01 	sts	0x0194, r16
      b4:	10 93 95 01 	sts	0x0195, r17
			//_delay_ms(1);
			return;
      b8:	4b c0       	rjmp	.+150    	; 0x150 <DoWork+0xf2>
		}
	LCD_Clear_Display();
      ba:	61 d5       	rcall	.+2754   	; 0xb7e <LCD_Clear_Display>

	
	LCD_printStr("Waiting...");
      bc:	80 e6       	ldi	r24, 0x60	; 96
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	aa d5       	rcall	.+2900   	; 0xc16 <LCD_printStr>
	//return ;
	DS_Init(DSBIT1);
      c2:	85 e0       	ldi	r24, 0x05	; 5
      c4:	05 d4       	rcall	.+2058   	; 0x8d0 <DS_Init>
		float t1 = DS_getFloatTemperature(DSBIT1);
      c6:	85 e0       	ldi	r24, 0x05	; 5
      c8:	8d d4       	rcall	.+2330   	; 0x9e4 <DS_getFloatTemperature>
      ca:	7b 01       	movw	r14, r22
      cc:	8c 01       	movw	r16, r24


		DS_Init(DSBIT2);
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	ff d3       	rcall	.+2046   	; 0x8d0 <DS_Init>
		float t2 = DS_getFloatTemperature(DSBIT2);
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	87 d4       	rcall	.+2318   	; 0x9e4 <DS_getFloatTemperature>
      d6:	5b 01       	movw	r10, r22
      d8:	6c 01       	movw	r12, r24


		DS_Init(DSBIT1);
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	f9 d3       	rcall	.+2034   	; 0x8d0 <DS_Init>
		float t3 = DS_getFloatTemperature(DSBIT1);
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	81 d4       	rcall	.+2306   	; 0x9e4 <DS_getFloatTemperature>
      e2:	3b 01       	movw	r6, r22
      e4:	4c 01       	movw	r8, r24

		HandleRelay(&setting1, t1, RELAY1);
      e6:	8e e9       	ldi	r24, 0x9E	; 158
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	b8 01       	movw	r22, r16
      ec:	a7 01       	movw	r20, r14
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	be d6       	rcall	.+3452   	; 0xe6e <HandleRelay>
		HandleRelay(&setting2, t2, RELAY2);
      f2:	8c ea       	ldi	r24, 0xAC	; 172
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	b6 01       	movw	r22, r12
      f8:	a5 01       	movw	r20, r10
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	b8 d6       	rcall	.+3440   	; 0xe6e <HandleRelay>
		HandleRelay(&setting3, t3, RELAY3);
      fe:	83 eb       	ldi	r24, 0xB3	; 179
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	b4 01       	movw	r22, r8
     104:	a3 01       	movw	r20, r6
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	b2 d6       	rcall	.+3428   	; 0xe6e <HandleRelay>

		LCD_2buffer_begin();
     10a:	98 d5       	rcall	.+2864   	; 0xc3c <LCD_2buffer_begin>
		//LCD_Clear_Display();
		LCD_2buffer_Move_Cursor(0);
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	c9 d5       	rcall	.+2962   	; 0xca2 <LCD_2buffer_Move_Cursor>
		LCD_2buffer_Show_FloatTemperature1(t1);
     110:	c8 01       	movw	r24, r16
     112:	b7 01       	movw	r22, r14
     114:	20 d6       	rcall	.+3136   	; 0xd56 <LCD_2buffer_Show_FloatTemperature1>

		LCD_2buffer_Move_Cursor(8);
     116:	88 e0       	ldi	r24, 0x08	; 8
     118:	c4 d5       	rcall	.+2952   	; 0xca2 <LCD_2buffer_Move_Cursor>
		LCD_2buffer_Show_FloatTemperature1(t2);
     11a:	c6 01       	movw	r24, r12
     11c:	b5 01       	movw	r22, r10
     11e:	1b d6       	rcall	.+3126   	; 0xd56 <LCD_2buffer_Show_FloatTemperature1>

		LCD_2buffer_Move_Cursor(16);
     120:	80 e1       	ldi	r24, 0x10	; 16
     122:	bf d5       	rcall	.+2942   	; 0xca2 <LCD_2buffer_Move_Cursor>
		LCD_2buffer_Show_FloatTemperature1(t3);
     124:	c4 01       	movw	r24, r8
     126:	b3 01       	movw	r22, r6
     128:	16 d6       	rcall	.+3116   	; 0xd56 <LCD_2buffer_Show_FloatTemperature1>
		LCD_2buffer_end();
     12a:	92 d5       	rcall	.+2852   	; 0xc50 <LCD_2buffer_end>
		iterations = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	80 93 92 01 	sts	0x0192, r24
     138:	90 93 93 01 	sts	0x0193, r25
     13c:	a0 93 94 01 	sts	0x0194, r26
     140:	b0 93 95 01 	sts	0x0195, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	8f e8       	ldi	r24, 0x8F	; 143
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <DoWork+0xea>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <DoWork+0xf0>
     14e:	00 00       	nop
		_delay_us(100);
}
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	ff 90       	pop	r15
     156:	ef 90       	pop	r14
     158:	df 90       	pop	r13
     15a:	cf 90       	pop	r12
     15c:	bf 90       	pop	r11
     15e:	af 90       	pop	r10
     160:	9f 90       	pop	r9
     162:	8f 90       	pop	r8
     164:	7f 90       	pop	r7
     166:	6f 90       	pop	r6
     168:	08 95       	ret

0000016a <ShowMainMenu>:

void ShowMainMenu()
{
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
	if (iterations%12000!=0)
     172:	e0 90 92 01 	lds	r14, 0x0192
     176:	f0 90 93 01 	lds	r15, 0x0193
     17a:	00 91 94 01 	lds	r16, 0x0194
     17e:	10 91 95 01 	lds	r17, 0x0195
     182:	c8 01       	movw	r24, r16
     184:	b7 01       	movw	r22, r14
     186:	20 ee       	ldi	r18, 0xE0	; 224
     188:	3e e2       	ldi	r19, 0x2E	; 46
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	fe dd       	rcall	.-1028   	; 0xfffffd8c <__eeprom_end+0xff7efd7a>
     190:	61 15       	cp	r22, r1
     192:	71 05       	cpc	r23, r1
     194:	81 05       	cpc	r24, r1
     196:	91 05       	cpc	r25, r1
     198:	71 f0       	breq	.+28     	; 0x1b6 <ShowMainMenu+0x4c>
		{
			iterations++;
     19a:	08 94       	sec
     19c:	e1 1c       	adc	r14, r1
     19e:	f1 1c       	adc	r15, r1
     1a0:	01 1d       	adc	r16, r1
     1a2:	11 1d       	adc	r17, r1
     1a4:	e0 92 92 01 	sts	0x0192, r14
     1a8:	f0 92 93 01 	sts	0x0193, r15
     1ac:	00 93 94 01 	sts	0x0194, r16
     1b0:	10 93 95 01 	sts	0x0195, r17
			//_delay_ms(1);
			return;
     1b4:	2f c0       	rjmp	.+94     	; 0x214 <ShowMainMenu+0xaa>
		}
	LCD_2buffer_begin();
     1b6:	42 d5       	rcall	.+2692   	; 0xc3c <LCD_2buffer_begin>
	LCD_2buffer_Move_Cursor(1);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	73 d5       	rcall	.+2790   	; 0xca2 <LCD_2buffer_Move_Cursor>
	LCD_2buffer_printStr("Temp1");
     1bc:	8b e6       	ldi	r24, 0x6B	; 107
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	5e d5       	rcall	.+2748   	; 0xc7e <LCD_2buffer_printStr>

	LCD_2buffer_Move_Cursor(9);
     1c2:	89 e0       	ldi	r24, 0x09	; 9
     1c4:	6e d5       	rcall	.+2780   	; 0xca2 <LCD_2buffer_Move_Cursor>
	LCD_2buffer_printStr("Temp2");
     1c6:	81 e7       	ldi	r24, 0x71	; 113
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	59 d5       	rcall	.+2738   	; 0xc7e <LCD_2buffer_printStr>

	LCD_2buffer_Move_Cursor(17);
     1cc:	81 e1       	ldi	r24, 0x11	; 17
     1ce:	69 d5       	rcall	.+2770   	; 0xca2 <LCD_2buffer_Move_Cursor>
	LCD_2buffer_printStr("Temp3");
     1d0:	87 e7       	ldi	r24, 0x77	; 119
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	54 d5       	rcall	.+2728   	; 0xc7e <LCD_2buffer_printStr>

	switch(	sub_current_status)
     1d6:	80 91 91 01 	lds	r24, 0x0191
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	39 f0       	breq	.+14     	; 0x1ec <ShowMainMenu+0x82>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	18 f0       	brcs	.+6      	; 0x1e8 <ShowMainMenu+0x7e>
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	39 f4       	brne	.+14     	; 0x1f4 <ShowMainMenu+0x8a>
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <ShowMainMenu+0x86>
	{
		case 0:
			LCD_2buffer_Move_Cursor(0);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <ShowMainMenu+0x88>
		break;

		case 1:
			LCD_2buffer_Move_Cursor(8);
     1ec:	88 e0       	ldi	r24, 0x08	; 8
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <ShowMainMenu+0x88>
		break;

		case 2:
			LCD_2buffer_Move_Cursor(16);
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	57 d5       	rcall	.+2734   	; 0xca2 <LCD_2buffer_Move_Cursor>
		break;
	}
	
	LCD_2buffer_printStr(">");
     1f4:	8d e7       	ldi	r24, 0x7D	; 125
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	42 d5       	rcall	.+2692   	; 0xc7e <LCD_2buffer_printStr>

	LCD_2buffer_end();
     1fa:	2a d5       	rcall	.+2644   	; 0xc50 <LCD_2buffer_end>
	//LCD_Clear_Display();
	//LCD_printStr("HELLO");
	//_delay_ms(1);
	iterations = 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	80 93 92 01 	sts	0x0192, r24
     208:	90 93 93 01 	sts	0x0193, r25
     20c:	a0 93 94 01 	sts	0x0194, r26
     210:	b0 93 95 01 	sts	0x0195, r27
}
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <ShowSettings>:

void ShowSettings()
{
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
	if (iterations%500!=0)
     226:	e0 90 92 01 	lds	r14, 0x0192
     22a:	f0 90 93 01 	lds	r15, 0x0193
     22e:	00 91 94 01 	lds	r16, 0x0194
     232:	10 91 95 01 	lds	r17, 0x0195
     236:	c8 01       	movw	r24, r16
     238:	b7 01       	movw	r22, r14
     23a:	24 ef       	ldi	r18, 0xF4	; 244
     23c:	31 e0       	ldi	r19, 0x01	; 1
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	a4 dd       	rcall	.-1208   	; 0xfffffd8c <__eeprom_end+0xff7efd7a>
     244:	61 15       	cp	r22, r1
     246:	71 05       	cpc	r23, r1
     248:	81 05       	cpc	r24, r1
     24a:	91 05       	cpc	r25, r1
     24c:	71 f0       	breq	.+28     	; 0x26a <ShowSettings+0x4c>
		{
			iterations++;
     24e:	08 94       	sec
     250:	e1 1c       	adc	r14, r1
     252:	f1 1c       	adc	r15, r1
     254:	01 1d       	adc	r16, r1
     256:	11 1d       	adc	r17, r1
     258:	e0 92 92 01 	sts	0x0192, r14
     25c:	f0 92 93 01 	sts	0x0193, r15
     260:	00 93 94 01 	sts	0x0194, r16
     264:	10 93 95 01 	sts	0x0195, r17
			//_delay_ms(1);
			return;
     268:	77 c0       	rjmp	.+238    	; 0x358 <ShowSettings+0x13a>
		}

	
	switch(sub_current_status)
     26a:	80 91 91 01 	lds	r24, 0x0191
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	41 f0       	breq	.+16     	; 0x282 <ShowSettings+0x64>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	18 f0       	brcs	.+6      	; 0x27c <ShowSettings+0x5e>
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	69 f4       	brne	.+26     	; 0x294 <ShowSettings+0x76>
     27a:	06 c0       	rjmp	.+12     	; 0x288 <ShowSettings+0x6a>
	{
		case 0: settings = &setting1; break;	
     27c:	8e e9       	ldi	r24, 0x9E	; 158
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	05 c0       	rjmp	.+10     	; 0x28c <ShowSettings+0x6e>
		case 1: settings = &setting2; break;
     282:	8c ea       	ldi	r24, 0xAC	; 172
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	02 c0       	rjmp	.+4      	; 0x28c <ShowSettings+0x6e>
		case 2: settings = &setting3; break;	
     288:	83 eb       	ldi	r24, 0xB3	; 179
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 99 01 	sts	0x0199, r25
     290:	80 93 98 01 	sts	0x0198, r24
	}

	blinker = !blinker;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 91 96 01 	lds	r25, 0x0196
     29a:	91 11       	cpse	r25, r1
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	80 93 96 01 	sts	0x0196, r24

	LCD_2buffer_begin();
     2a2:	cc d4       	rcall	.+2456   	; 0xc3c <LCD_2buffer_begin>
	if ((blinker)||(settings_item2!=1))
     2a4:	80 91 96 01 	lds	r24, 0x0196
     2a8:	88 23       	and	r24, r24
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <ShowSettings+0x96>
     2ac:	80 91 b2 01 	lds	r24, 0x01B2
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	59 f0       	breq	.+22     	; 0x2ca <ShowSettings+0xac>
	{
		LCD_2buffer_Move_Cursor(1);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	f5 d4       	rcall	.+2538   	; 0xca2 <LCD_2buffer_Move_Cursor>
		LCD_2buffer_Show_FloatTemperature1(settings->temp);
     2b8:	e0 91 98 01 	lds	r30, 0x0198
     2bc:	f0 91 99 01 	lds	r31, 0x0199
     2c0:	60 81       	ld	r22, Z
     2c2:	71 81       	ldd	r23, Z+1	; 0x01
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	93 81       	ldd	r25, Z+3	; 0x03
     2c8:	46 d5       	rcall	.+2700   	; 0xd56 <LCD_2buffer_Show_FloatTemperature1>
	}
	
	if ((blinker)||(settings_item2!=2))
     2ca:	80 91 96 01 	lds	r24, 0x0196
     2ce:	88 23       	and	r24, r24
     2d0:	21 f4       	brne	.+8      	; 0x2da <ShowSettings+0xbc>
     2d2:	80 91 b2 01 	lds	r24, 0x01B2
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	49 f0       	breq	.+18     	; 0x2ec <ShowSettings+0xce>
	{
		LCD_2buffer_Move_Cursor(9);
     2da:	89 e0       	ldi	r24, 0x09	; 9
     2dc:	e2 d4       	rcall	.+2500   	; 0xca2 <LCD_2buffer_Move_Cursor>
		LCD_2buffer_Print_Number(settings->d);
     2de:	e0 91 98 01 	lds	r30, 0x0198
     2e2:	f0 91 99 01 	lds	r31, 0x0199
     2e6:	84 81       	ldd	r24, Z+4	; 0x04
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	de d4       	rcall	.+2492   	; 0xca8 <LCD_2buffer_Print_Number>
	}
	if ((blinker)||(settings_item2!=3))
     2ec:	80 91 96 01 	lds	r24, 0x0196
     2f0:	88 23       	and	r24, r24
     2f2:	21 f4       	brne	.+8      	; 0x2fc <ShowSettings+0xde>
     2f4:	80 91 b2 01 	lds	r24, 0x01B2
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	79 f0       	breq	.+30     	; 0x31a <ShowSettings+0xfc>
	{
		LCD_2buffer_Move_Cursor(17);
     2fc:	81 e1       	ldi	r24, 0x11	; 17
     2fe:	d1 d4       	rcall	.+2466   	; 0xca2 <LCD_2buffer_Move_Cursor>
		if(settings->direction)
     300:	e0 91 98 01 	lds	r30, 0x0198
     304:	f0 91 99 01 	lds	r31, 0x0199
     308:	85 81       	ldd	r24, Z+5	; 0x05
     30a:	88 23       	and	r24, r24
     30c:	19 f0       	breq	.+6      	; 0x314 <ShowSettings+0xf6>
		{
			LCD_2buffer_printStr("UP");
     30e:	8f e7       	ldi	r24, 0x7F	; 127
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <ShowSettings+0xfa>
		}else
		{
			LCD_2buffer_printStr("DOWN");
     314:	82 e8       	ldi	r24, 0x82	; 130
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	b2 d4       	rcall	.+2404   	; 0xc7e <LCD_2buffer_printStr>
		}
	}

	switch(	settings_item1)
     31a:	80 91 b9 01 	lds	r24, 0x01B9
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	39 f0       	breq	.+14     	; 0x330 <ShowSettings+0x112>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	18 f0       	brcs	.+6      	; 0x32c <ShowSettings+0x10e>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	39 f4       	brne	.+14     	; 0x338 <ShowSettings+0x11a>
     32a:	04 c0       	rjmp	.+8      	; 0x334 <ShowSettings+0x116>
	{
		case 0:
			LCD_2buffer_Move_Cursor(0);
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	03 c0       	rjmp	.+6      	; 0x336 <ShowSettings+0x118>
		break;

		case 1:
			LCD_2buffer_Move_Cursor(8);
     330:	88 e0       	ldi	r24, 0x08	; 8
     332:	01 c0       	rjmp	.+2      	; 0x336 <ShowSettings+0x118>
		break;

		case 2:
			LCD_2buffer_Move_Cursor(16);
     334:	80 e1       	ldi	r24, 0x10	; 16
     336:	b5 d4       	rcall	.+2410   	; 0xca2 <LCD_2buffer_Move_Cursor>
		break;
	}
	LCD_2buffer_printStr(">");
     338:	8d e7       	ldi	r24, 0x7D	; 125
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	a0 d4       	rcall	.+2368   	; 0xc7e <LCD_2buffer_printStr>
	LCD_2buffer_end();
     33e:	88 d4       	rcall	.+2320   	; 0xc50 <LCD_2buffer_end>
	iterations = 1;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	80 93 92 01 	sts	0x0192, r24
     34c:	90 93 93 01 	sts	0x0193, r25
     350:	a0 93 94 01 	sts	0x0194, r26
     354:	b0 93 95 01 	sts	0x0195, r27
}
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <BTN1_Pressed>:

void BTN1_Pressed()
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	switch(current_status)
     366:	80 91 90 01 	lds	r24, 0x0190
     36a:	8a 30       	cpi	r24, 0x0A	; 10
     36c:	21 f0       	breq	.+8      	; 0x376 <BTN1_Pressed+0x14>
     36e:	84 31       	cpi	r24, 0x14	; 20
     370:	09 f0       	breq	.+2      	; 0x374 <BTN1_Pressed+0x12>
     372:	49 c0       	rjmp	.+146    	; 0x406 <BTN1_Pressed+0xa4>
     374:	0d c0       	rjmp	.+26     	; 0x390 <BTN1_Pressed+0x2e>
	{
		case STATUS_MAIN_MAENU:
			if(sub_current_status==0)
     376:	80 91 91 01 	lds	r24, 0x0191
     37a:	88 23       	and	r24, r24
     37c:	19 f4       	brne	.+6      	; 0x384 <BTN1_Pressed+0x22>
				sub_current_status = 3;
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	80 93 91 01 	sts	0x0191, r24
			sub_current_status--;
     384:	80 91 91 01 	lds	r24, 0x0191
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 91 01 	sts	0x0191, r24
			
		break;
     38e:	3b c0       	rjmp	.+118    	; 0x406 <BTN1_Pressed+0xa4>
		case STATUS_SETTINGS:
			if (settings_item2==0)
     390:	80 91 b2 01 	lds	r24, 0x01B2
     394:	88 23       	and	r24, r24
     396:	69 f4       	brne	.+26     	; 0x3b2 <BTN1_Pressed+0x50>
			{
				if(settings_item1==0)
     398:	80 91 b9 01 	lds	r24, 0x01B9
     39c:	88 23       	and	r24, r24
     39e:	19 f4       	brne	.+6      	; 0x3a6 <BTN1_Pressed+0x44>
					settings_item1 = 3;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	80 93 b9 01 	sts	0x01B9, r24
				settings_item1--;
     3a6:	80 91 b9 01 	lds	r24, 0x01B9
     3aa:	81 50       	subi	r24, 0x01	; 1
     3ac:	80 93 b9 01 	sts	0x01B9, r24
     3b0:	13 c0       	rjmp	.+38     	; 0x3d8 <BTN1_Pressed+0x76>
			}
			if (settings_item2==1)
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	89 f4       	brne	.+34     	; 0x3d8 <BTN1_Pressed+0x76>
			{
				settings->temp-=0.1;
     3b6:	c0 91 98 01 	lds	r28, 0x0198
     3ba:	d0 91 99 01 	lds	r29, 0x0199
     3be:	68 81       	ld	r22, Y
     3c0:	79 81       	ldd	r23, Y+1	; 0x01
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	9b 81       	ldd	r25, Y+3	; 0x03
     3c6:	2d ec       	ldi	r18, 0xCD	; 205
     3c8:	3c ec       	ldi	r19, 0xCC	; 204
     3ca:	4c ec       	ldi	r20, 0xCC	; 204
     3cc:	5d e3       	ldi	r21, 0x3D	; 61
     3ce:	65 d7       	rcall	.+3786   	; 0x129a <__subsf3>
     3d0:	68 83       	st	Y, r22
     3d2:	79 83       	std	Y+1, r23	; 0x01
     3d4:	8a 83       	std	Y+2, r24	; 0x02
     3d6:	9b 83       	std	Y+3, r25	; 0x03
			}
			if (settings_item2==2)
     3d8:	80 91 b2 01 	lds	r24, 0x01B2
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	41 f4       	brne	.+16     	; 0x3f0 <BTN1_Pressed+0x8e>
			{
				settings->d--;
     3e0:	e0 91 98 01 	lds	r30, 0x0198
     3e4:	f0 91 99 01 	lds	r31, 0x0199
     3e8:	84 81       	ldd	r24, Z+4	; 0x04
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	84 83       	std	Z+4, r24	; 0x04
     3ee:	0b c0       	rjmp	.+22     	; 0x406 <BTN1_Pressed+0xa4>
			}
			if (settings_item2==3)
     3f0:	83 30       	cpi	r24, 0x03	; 3
     3f2:	49 f4       	brne	.+18     	; 0x406 <BTN1_Pressed+0xa4>
			{
				settings->direction = !settings->direction;
     3f4:	e0 91 98 01 	lds	r30, 0x0198
     3f8:	f0 91 99 01 	lds	r31, 0x0199
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	95 81       	ldd	r25, Z+5	; 0x05
     400:	91 11       	cpse	r25, r1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	85 83       	std	Z+5, r24	; 0x05
			}
		break;
	}
	iterations = 0;
     406:	10 92 92 01 	sts	0x0192, r1
     40a:	10 92 93 01 	sts	0x0193, r1
     40e:	10 92 94 01 	sts	0x0194, r1
     412:	10 92 95 01 	sts	0x0195, r1
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <BTN2_Pressed>:
void BTN2_Pressed()
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
	switch(current_status)
     420:	80 91 90 01 	lds	r24, 0x0190
     424:	8a 30       	cpi	r24, 0x0A	; 10
     426:	21 f0       	breq	.+8      	; 0x430 <BTN2_Pressed+0x14>
     428:	84 31       	cpi	r24, 0x14	; 20
     42a:	09 f0       	breq	.+2      	; 0x42e <BTN2_Pressed+0x12>
     42c:	43 c0       	rjmp	.+134    	; 0x4b4 <__stack+0x55>
     42e:	0a c0       	rjmp	.+20     	; 0x444 <BTN2_Pressed+0x28>
	{
		case STATUS_MAIN_MAENU:
			sub_current_status++;
     430:	80 91 91 01 	lds	r24, 0x0191
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 91 01 	sts	0x0191, r24
			if(sub_current_status==3)
     43a:	83 30       	cpi	r24, 0x03	; 3
     43c:	d9 f5       	brne	.+118    	; 0x4b4 <__stack+0x55>
				sub_current_status = 0;
     43e:	10 92 91 01 	sts	0x0191, r1
     442:	38 c0       	rjmp	.+112    	; 0x4b4 <__stack+0x55>
			
		break;
		case STATUS_SETTINGS:
			if (settings_item2==0)
     444:	80 91 b2 01 	lds	r24, 0x01B2
     448:	88 23       	and	r24, r24
     44a:	51 f4       	brne	.+20     	; 0x460 <__stack+0x1>
			{	
				settings_item1++;
     44c:	80 91 b9 01 	lds	r24, 0x01B9
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 b9 01 	sts	0x01B9, r24
				if(settings_item1==3)
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	b1 f4       	brne	.+44     	; 0x486 <__stack+0x27>
					settings_item1 = 0;
     45a:	10 92 b9 01 	sts	0x01B9, r1
     45e:	13 c0       	rjmp	.+38     	; 0x486 <__stack+0x27>
			}
			if (settings_item2==1)
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	89 f4       	brne	.+34     	; 0x486 <__stack+0x27>
			{
				settings->temp += 0.1;
     464:	c0 91 98 01 	lds	r28, 0x0198
     468:	d0 91 99 01 	lds	r29, 0x0199
     46c:	68 81       	ld	r22, Y
     46e:	79 81       	ldd	r23, Y+1	; 0x01
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	9b 81       	ldd	r25, Y+3	; 0x03
     474:	2d ec       	ldi	r18, 0xCD	; 205
     476:	3c ec       	ldi	r19, 0xCC	; 204
     478:	4c ec       	ldi	r20, 0xCC	; 204
     47a:	5d e3       	ldi	r21, 0x3D	; 61
     47c:	e7 d6       	rcall	.+3534   	; 0x124c <__addsf3>
     47e:	68 83       	st	Y, r22
     480:	79 83       	std	Y+1, r23	; 0x01
     482:	8a 83       	std	Y+2, r24	; 0x02
     484:	9b 83       	std	Y+3, r25	; 0x03
			}
			if (settings_item2==2)
     486:	80 91 b2 01 	lds	r24, 0x01B2
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	41 f4       	brne	.+16     	; 0x49e <__stack+0x3f>
			{
				settings->d++;
     48e:	e0 91 98 01 	lds	r30, 0x0198
     492:	f0 91 99 01 	lds	r31, 0x0199
     496:	84 81       	ldd	r24, Z+4	; 0x04
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	84 83       	std	Z+4, r24	; 0x04
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__stack+0x55>
			}
			if (settings_item2==3)
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__stack+0x55>
			{
				settings->direction = !settings->direction;
     4a2:	e0 91 98 01 	lds	r30, 0x0198
     4a6:	f0 91 99 01 	lds	r31, 0x0199
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	95 81       	ldd	r25, Z+5	; 0x05
     4ae:	91 11       	cpse	r25, r1
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	85 83       	std	Z+5, r24	; 0x05
			}
		break;
	}
	iterations = 0;
     4b4:	10 92 92 01 	sts	0x0192, r1
     4b8:	10 92 93 01 	sts	0x0193, r1
     4bc:	10 92 94 01 	sts	0x0194, r1
     4c0:	10 92 95 01 	sts	0x0195, r1
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <BTN3_Pressed>:
void BTN3_Pressed()
{
	switch(current_status)
     4ca:	80 91 90 01 	lds	r24, 0x0190
     4ce:	8a 30       	cpi	r24, 0x0A	; 10
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <BTN3_Pressed+0xe>
     4d2:	84 31       	cpi	r24, 0x14	; 20
     4d4:	09 f5       	brne	.+66     	; 0x518 <BTN3_Pressed+0x4e>
     4d6:	10 c0       	rjmp	.+32     	; 0x4f8 <BTN3_Pressed+0x2e>
	{
		case STATUS_MAIN_MAENU:
			current_status = STATUS_SETTINGS;
     4d8:	84 e1       	ldi	r24, 0x14	; 20
     4da:	80 93 90 01 	sts	0x0190, r24
			iterations = 0;
     4de:	10 92 92 01 	sts	0x0192, r1
     4e2:	10 92 93 01 	sts	0x0193, r1
     4e6:	10 92 94 01 	sts	0x0194, r1
     4ea:	10 92 95 01 	sts	0x0195, r1
			settings_item1 = 0;
     4ee:	10 92 b9 01 	sts	0x01B9, r1
			settings_item2 = 0;
     4f2:	10 92 b2 01 	sts	0x01B2, r1
		break;
     4f6:	08 95       	ret

		case STATUS_SETTINGS:
			if (settings_item2==0)
     4f8:	80 91 b2 01 	lds	r24, 0x01B2
     4fc:	88 23       	and	r24, r24
     4fe:	31 f4       	brne	.+12     	; 0x50c <BTN3_Pressed+0x42>
			{
				settings_item2 = settings_item1+1;
     500:	80 91 b9 01 	lds	r24, 0x01B9
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 b2 01 	sts	0x01B2, r24
     50a:	08 95       	ret
			}else
			{	
				settings_item2 = 0;
     50c:	10 92 b2 01 	sts	0x01B2, r1
				Settings_Write(sub_current_status+1);
     510:	80 91 91 01 	lds	r24, 0x0191
     514:	8f 5f       	subi	r24, 0xFF	; 255
     516:	89 d4       	rcall	.+2322   	; 0xe2a <Settings_Write>
     518:	08 95       	ret

0000051a <BTN1_Long_Pressed>:
		break;
	}
}

void BTN1_Long_Pressed()
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
	switch(current_status)
     51e:	80 91 90 01 	lds	r24, 0x0190
     522:	84 31       	cpi	r24, 0x14	; 20
     524:	a9 f4       	brne	.+42     	; 0x550 <BTN1_Long_Pressed+0x36>
	{
		case STATUS_SETTINGS:
			if (settings_item2==1)
     526:	80 91 b2 01 	lds	r24, 0x01B2
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	89 f4       	brne	.+34     	; 0x550 <BTN1_Long_Pressed+0x36>
			{
				settings->temp -= 5;
     52e:	c0 91 98 01 	lds	r28, 0x0198
     532:	d0 91 99 01 	lds	r29, 0x0199
     536:	68 81       	ld	r22, Y
     538:	79 81       	ldd	r23, Y+1	; 0x01
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	9b 81       	ldd	r25, Y+3	; 0x03
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 ea       	ldi	r20, 0xA0	; 160
     544:	50 e4       	ldi	r21, 0x40	; 64
     546:	a9 d6       	rcall	.+3410   	; 0x129a <__subsf3>
     548:	68 83       	st	Y, r22
     54a:	79 83       	std	Y+1, r23	; 0x01
     54c:	8a 83       	std	Y+2, r24	; 0x02
     54e:	9b 83       	std	Y+3, r25	; 0x03
			}
		break;
	}
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <BTN2_Long_Pressed>:

void BTN2_Long_Pressed()
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
	switch(current_status)
     55a:	80 91 90 01 	lds	r24, 0x0190
     55e:	84 31       	cpi	r24, 0x14	; 20
     560:	a9 f4       	brne	.+42     	; 0x58c <BTN2_Long_Pressed+0x36>
	{
		case STATUS_SETTINGS:
			if (settings_item2==1)
     562:	80 91 b2 01 	lds	r24, 0x01B2
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	89 f4       	brne	.+34     	; 0x58c <BTN2_Long_Pressed+0x36>
			{
				settings->temp += 5;
     56a:	c0 91 98 01 	lds	r28, 0x0198
     56e:	d0 91 99 01 	lds	r29, 0x0199
     572:	68 81       	ld	r22, Y
     574:	79 81       	ldd	r23, Y+1	; 0x01
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	9b 81       	ldd	r25, Y+3	; 0x03
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 ea       	ldi	r20, 0xA0	; 160
     580:	50 e4       	ldi	r21, 0x40	; 64
     582:	64 d6       	rcall	.+3272   	; 0x124c <__addsf3>
     584:	68 83       	st	Y, r22
     586:	79 83       	std	Y+1, r23	; 0x01
     588:	8a 83       	std	Y+2, r24	; 0x02
     58a:	9b 83       	std	Y+3, r25	; 0x03
			}
		break;
	}
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <BTN3_Long_Pressed>:

void BTN3_Long_Pressed()
{
	//LCD_printStr("HELLO");
	if (current_status==STATUS_DEFAULT)
     592:	80 91 90 01 	lds	r24, 0x0190
     596:	88 23       	and	r24, r24
     598:	31 f4       	brne	.+12     	; 0x5a6 <BTN3_Long_Pressed+0x14>
	{
		current_status = STATUS_MAIN_MAENU;
     59a:	8a e0       	ldi	r24, 0x0A	; 10
     59c:	80 93 90 01 	sts	0x0190, r24
		sub_current_status = 0;
     5a0:	10 92 91 01 	sts	0x0191, r1
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <BTN3_Long_Pressed+0x18>
		iterations=0;
	}else
	{
		current_status = STATUS_DEFAULT;
     5a6:	10 92 90 01 	sts	0x0190, r1
		iterations=0;
     5aa:	10 92 92 01 	sts	0x0192, r1
     5ae:	10 92 93 01 	sts	0x0193, r1
     5b2:	10 92 94 01 	sts	0x0194, r1
     5b6:	10 92 95 01 	sts	0x0195, r1
     5ba:	08 95       	ret

000005bc <BTN_Init>:
	}
}

void BTN_Init()
{
	BTN1_status = 0;
     5bc:	10 92 9a 01 	sts	0x019A, r1
     5c0:	10 92 9b 01 	sts	0x019B, r1
     5c4:	10 92 9c 01 	sts	0x019C, r1
     5c8:	10 92 9d 01 	sts	0x019D, r1
	BTN2_status = 0;
     5cc:	10 92 a4 01 	sts	0x01A4, r1
     5d0:	10 92 a5 01 	sts	0x01A5, r1
     5d4:	10 92 a6 01 	sts	0x01A6, r1
     5d8:	10 92 a7 01 	sts	0x01A7, r1
	BTN3_status = 0;
     5dc:	10 92 a8 01 	sts	0x01A8, r1
     5e0:	10 92 a9 01 	sts	0x01A9, r1
     5e4:	10 92 aa 01 	sts	0x01AA, r1
     5e8:	10 92 ab 01 	sts	0x01AB, r1

	Off(BTNDDR, BTN1); 
     5ec:	a0 98       	cbi	0x14, 0	; 20
	Off(BTNDDR, BTN2); 
     5ee:	a2 98       	cbi	0x14, 2	; 20
	Off(BTNDDR, BTN3); 
     5f0:	a1 98       	cbi	0x14, 1	; 20

	On(BTNPORT, BTN1); 
     5f2:	a8 9a       	sbi	0x15, 0	; 21
	On(BTNPORT, BTN2); 
     5f4:	aa 9a       	sbi	0x15, 2	; 21
	On(BTNPORT, BTN3); 
     5f6:	a9 9a       	sbi	0x15, 1	; 21

	//Led_On_time = 0;
}
     5f8:	08 95       	ret

000005fa <BTN_Process>:

void BTN_Process()
{
	if ((BTNPIN & (1<<BTN1))==0)
     5fa:	98 99       	sbic	0x13, 0	; 19
     5fc:	15 c0       	rjmp	.+42     	; 0x628 <BTN_Process+0x2e>
	{
		if (BTN1_status>=0)
     5fe:	80 91 9a 01 	lds	r24, 0x019A
     602:	90 91 9b 01 	lds	r25, 0x019B
     606:	a0 91 9c 01 	lds	r26, 0x019C
     60a:	b0 91 9d 01 	lds	r27, 0x019D
     60e:	b7 fd       	sbrc	r27, 7
     610:	0b c0       	rjmp	.+22     	; 0x628 <BTN_Process+0x2e>
			BTN1_status ++;
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	a1 1d       	adc	r26, r1
     616:	b1 1d       	adc	r27, r1
     618:	80 93 9a 01 	sts	0x019A, r24
     61c:	90 93 9b 01 	sts	0x019B, r25
     620:	a0 93 9c 01 	sts	0x019C, r26
     624:	b0 93 9d 01 	sts	0x019D, r27
		//Led_On_time = 0;
	}

	if ((BTNPIN & (1<<BTN2))==0)
     628:	9a 99       	sbic	0x13, 2	; 19
     62a:	15 c0       	rjmp	.+42     	; 0x656 <BTN_Process+0x5c>
	{
		if (BTN2_status>=0)
     62c:	80 91 a4 01 	lds	r24, 0x01A4
     630:	90 91 a5 01 	lds	r25, 0x01A5
     634:	a0 91 a6 01 	lds	r26, 0x01A6
     638:	b0 91 a7 01 	lds	r27, 0x01A7
     63c:	b7 fd       	sbrc	r27, 7
     63e:	0b c0       	rjmp	.+22     	; 0x656 <BTN_Process+0x5c>
			BTN2_status ++;
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	a1 1d       	adc	r26, r1
     644:	b1 1d       	adc	r27, r1
     646:	80 93 a4 01 	sts	0x01A4, r24
     64a:	90 93 a5 01 	sts	0x01A5, r25
     64e:	a0 93 a6 01 	sts	0x01A6, r26
     652:	b0 93 a7 01 	sts	0x01A7, r27
		//Led_On_time = 0;
	}

	if ((BTNPIN & (1<<BTN3))==0)
     656:	99 99       	sbic	0x13, 1	; 19
     658:	15 c0       	rjmp	.+42     	; 0x684 <BTN_Process+0x8a>
	{
		if (BTN3_status>=0)
     65a:	80 91 a8 01 	lds	r24, 0x01A8
     65e:	90 91 a9 01 	lds	r25, 0x01A9
     662:	a0 91 aa 01 	lds	r26, 0x01AA
     666:	b0 91 ab 01 	lds	r27, 0x01AB
     66a:	b7 fd       	sbrc	r27, 7
     66c:	0b c0       	rjmp	.+22     	; 0x684 <BTN_Process+0x8a>
			BTN3_status ++;
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	a1 1d       	adc	r26, r1
     672:	b1 1d       	adc	r27, r1
     674:	80 93 a8 01 	sts	0x01A8, r24
     678:	90 93 a9 01 	sts	0x01A9, r25
     67c:	a0 93 aa 01 	sts	0x01AA, r26
     680:	b0 93 ab 01 	sts	0x01AB, r27
		//Led_On_time = 0;
	}

	if (BTN1_status>BTN_long_time)
     684:	80 91 9a 01 	lds	r24, 0x019A
     688:	90 91 9b 01 	lds	r25, 0x019B
     68c:	a0 91 9c 01 	lds	r26, 0x019C
     690:	b0 91 9d 01 	lds	r27, 0x019D
     694:	89 3e       	cpi	r24, 0xE9	; 233
     696:	23 e0       	ldi	r18, 0x03	; 3
     698:	92 07       	cpc	r25, r18
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	a2 07       	cpc	r26, r18
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	b2 07       	cpc	r27, r18
     6a2:	64 f0       	brlt	.+24     	; 0x6bc <BTN_Process+0xc2>
	{
		if (BTN1_status>=0)
			BTN1_Long_Pressed();
     6a4:	3a df       	rcall	.-396    	; 0x51a <BTN1_Long_Pressed>
		BTN1_status = -1;
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	dc 01       	movw	r26, r24
     6ac:	80 93 9a 01 	sts	0x019A, r24
     6b0:	90 93 9b 01 	sts	0x019B, r25
     6b4:	a0 93 9c 01 	sts	0x019C, r26
     6b8:	b0 93 9d 01 	sts	0x019D, r27
	}
	
	if (BTN2_status>BTN_long_time)
     6bc:	80 91 a4 01 	lds	r24, 0x01A4
     6c0:	90 91 a5 01 	lds	r25, 0x01A5
     6c4:	a0 91 a6 01 	lds	r26, 0x01A6
     6c8:	b0 91 a7 01 	lds	r27, 0x01A7
     6cc:	89 3e       	cpi	r24, 0xE9	; 233
     6ce:	23 e0       	ldi	r18, 0x03	; 3
     6d0:	92 07       	cpc	r25, r18
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	a2 07       	cpc	r26, r18
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	b2 07       	cpc	r27, r18
     6da:	64 f0       	brlt	.+24     	; 0x6f4 <BTN_Process+0xfa>
	{
		if (BTN2_status>=0)
			BTN2_Long_Pressed();
     6dc:	3c df       	rcall	.-392    	; 0x556 <BTN2_Long_Pressed>
		BTN2_status = -1;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
     6e2:	dc 01       	movw	r26, r24
     6e4:	80 93 a4 01 	sts	0x01A4, r24
     6e8:	90 93 a5 01 	sts	0x01A5, r25
     6ec:	a0 93 a6 01 	sts	0x01A6, r26
     6f0:	b0 93 a7 01 	sts	0x01A7, r27
	}

	if (BTN3_status>BTN_long_time)
     6f4:	80 91 a8 01 	lds	r24, 0x01A8
     6f8:	90 91 a9 01 	lds	r25, 0x01A9
     6fc:	a0 91 aa 01 	lds	r26, 0x01AA
     700:	b0 91 ab 01 	lds	r27, 0x01AB
     704:	89 3e       	cpi	r24, 0xE9	; 233
     706:	23 e0       	ldi	r18, 0x03	; 3
     708:	92 07       	cpc	r25, r18
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	a2 07       	cpc	r26, r18
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	b2 07       	cpc	r27, r18
     712:	64 f0       	brlt	.+24     	; 0x72c <BTN_Process+0x132>
	{
		if (BTN3_status>=0)
			BTN3_Long_Pressed();
     714:	3e df       	rcall	.-388    	; 0x592 <BTN3_Long_Pressed>
		BTN3_status = -1;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	9f ef       	ldi	r25, 0xFF	; 255
     71a:	dc 01       	movw	r26, r24
     71c:	80 93 a8 01 	sts	0x01A8, r24
     720:	90 93 a9 01 	sts	0x01A9, r25
     724:	a0 93 aa 01 	sts	0x01AA, r26
     728:	b0 93 ab 01 	sts	0x01AB, r27
	}

	if ((BTNPIN & (1<<BTN1))!=0)
     72c:	98 9b       	sbis	0x13, 0	; 19
     72e:	1c c0       	rjmp	.+56     	; 0x768 <BTN_Process+0x16e>
	{
		if ((BTN1_status>0)&&(BTN1_status<BTN_long_time))
     730:	80 91 9a 01 	lds	r24, 0x019A
     734:	90 91 9b 01 	lds	r25, 0x019B
     738:	a0 91 9c 01 	lds	r26, 0x019C
     73c:	b0 91 9d 01 	lds	r27, 0x019D
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	a1 09       	sbc	r26, r1
     744:	b1 09       	sbc	r27, r1
     746:	87 3e       	cpi	r24, 0xE7	; 231
     748:	23 e0       	ldi	r18, 0x03	; 3
     74a:	92 07       	cpc	r25, r18
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	a2 07       	cpc	r26, r18
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	b2 07       	cpc	r27, r18
     754:	08 f4       	brcc	.+2      	; 0x758 <BTN_Process+0x15e>
		{
			BTN1_Pressed();
     756:	05 de       	rcall	.-1014   	; 0x362 <BTN1_Pressed>
		}
		BTN1_status = 0;
     758:	10 92 9a 01 	sts	0x019A, r1
     75c:	10 92 9b 01 	sts	0x019B, r1
     760:	10 92 9c 01 	sts	0x019C, r1
     764:	10 92 9d 01 	sts	0x019D, r1
	}

	if ((BTNPIN & (1<<BTN2))!=0)
     768:	9a 9b       	sbis	0x13, 2	; 19
     76a:	1c c0       	rjmp	.+56     	; 0x7a4 <BTN_Process+0x1aa>
	{
		if ((BTN2_status>0)&&(BTN2_status<BTN_long_time))
     76c:	80 91 a4 01 	lds	r24, 0x01A4
     770:	90 91 a5 01 	lds	r25, 0x01A5
     774:	a0 91 a6 01 	lds	r26, 0x01A6
     778:	b0 91 a7 01 	lds	r27, 0x01A7
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	a1 09       	sbc	r26, r1
     780:	b1 09       	sbc	r27, r1
     782:	87 3e       	cpi	r24, 0xE7	; 231
     784:	23 e0       	ldi	r18, 0x03	; 3
     786:	92 07       	cpc	r25, r18
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	a2 07       	cpc	r26, r18
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	b2 07       	cpc	r27, r18
     790:	08 f4       	brcc	.+2      	; 0x794 <BTN_Process+0x19a>
		{
			BTN2_Pressed();
     792:	44 de       	rcall	.-888    	; 0x41c <BTN2_Pressed>
		}
		BTN2_status = 0;
     794:	10 92 a4 01 	sts	0x01A4, r1
     798:	10 92 a5 01 	sts	0x01A5, r1
     79c:	10 92 a6 01 	sts	0x01A6, r1
     7a0:	10 92 a7 01 	sts	0x01A7, r1
	}

	if ((BTNPIN & (1<<BTN3))!=0)
     7a4:	99 9b       	sbis	0x13, 1	; 19
     7a6:	1c c0       	rjmp	.+56     	; 0x7e0 <BTN_Process+0x1e6>
	{
		if ((BTN3_status>0)&&(BTN3_status<BTN_long_time))
     7a8:	80 91 a8 01 	lds	r24, 0x01A8
     7ac:	90 91 a9 01 	lds	r25, 0x01A9
     7b0:	a0 91 aa 01 	lds	r26, 0x01AA
     7b4:	b0 91 ab 01 	lds	r27, 0x01AB
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	a1 09       	sbc	r26, r1
     7bc:	b1 09       	sbc	r27, r1
     7be:	87 3e       	cpi	r24, 0xE7	; 231
     7c0:	23 e0       	ldi	r18, 0x03	; 3
     7c2:	92 07       	cpc	r25, r18
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	a2 07       	cpc	r26, r18
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	b2 07       	cpc	r27, r18
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <BTN_Process+0x1d6>
		{
			BTN3_Pressed();
     7ce:	7d de       	rcall	.-774    	; 0x4ca <BTN3_Pressed>
		}
		BTN3_status = 0;
     7d0:	10 92 a8 01 	sts	0x01A8, r1
     7d4:	10 92 a9 01 	sts	0x01A9, r1
     7d8:	10 92 aa 01 	sts	0x01AA, r1
     7dc:	10 92 ab 01 	sts	0x01AB, r1
     7e0:	08 95       	ret

000007e2 <main>:

int main()
{
	
	int turn = 0;
	LCD_Init();
     7e2:	d0 d1       	rcall	.+928    	; 0xb84 <LCD_Init>
	BTN_Init();
     7e4:	eb de       	rcall	.-554    	; 0x5bc <BTN_Init>
	Settings_Init();
     7e6:	1a d3       	rcall	.+1588   	; 0xe1c <Settings_Init>
	Relay_Init();
     7e8:	3b d3       	rcall	.+1654   	; 0xe60 <Relay_Init>

	ledON;
     7ea:	94 9a       	sbi	0x12, 4	; 18
	LCD_Clear_Display();
     7ec:	c8 d1       	rcall	.+912    	; 0xb7e <LCD_Clear_Display>
	

	
	while (1)
	{
		BTN_Process();
     7ee:	05 df       	rcall	.-502    	; 0x5fa <BTN_Process>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	9f e0       	ldi	r25, 0x0F	; 15
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <main+0x12>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0x18>
     7fa:	00 00       	nop
		_delay_ms(1);
		//LCD_Clear_Display();
		switch(current_status)
     7fc:	80 91 90 01 	lds	r24, 0x0190
     800:	8a 30       	cpi	r24, 0x0A	; 10
     802:	31 f0       	breq	.+12     	; 0x810 <main+0x2e>
     804:	84 31       	cpi	r24, 0x14	; 20
     806:	31 f0       	breq	.+12     	; 0x814 <main+0x32>
     808:	88 23       	and	r24, r24
     80a:	89 f7       	brne	.-30     	; 0x7ee <main+0xc>
		{
			case STATUS_DEFAULT:
				DoWork();
     80c:	28 dc       	rcall	.-1968   	; 0x5e <DoWork>
			break;
     80e:	ef cf       	rjmp	.-34     	; 0x7ee <main+0xc>
			case STATUS_MAIN_MAENU:
				ShowMainMenu();
     810:	ac dc       	rcall	.-1704   	; 0x16a <ShowMainMenu>
			break; 
     812:	ed cf       	rjmp	.-38     	; 0x7ee <main+0xc>
			case STATUS_SETTINGS:
				ShowSettings();
     814:	04 dd       	rcall	.-1528   	; 0x21e <ShowSettings>
     816:	eb cf       	rjmp	.-42     	; 0x7ee <main+0xc>

00000818 <DS_isPresent>:
#include "ds18b20.h"

int DS_isPresent(byte DSBIT)
{
	byte r = 0;
	DSDDR |= 1<<DSBIT;
     818:	94 b3       	in	r25, 0x14	; 20
     81a:	21 e0       	ldi	r18, 0x01	; 1
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <DS_isPresent+0xc>
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	8a 95       	dec	r24
     826:	e2 f7       	brpl	.-8      	; 0x820 <DS_isPresent+0x8>
     828:	92 2b       	or	r25, r18
     82a:	94 bb       	out	0x14, r25	; 20
	DSPORT &= ~(1<<DSBIT);
     82c:	85 b3       	in	r24, 0x15	; 21
     82e:	20 95       	com	r18
     830:	82 23       	and	r24, r18
     832:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     834:	8f ec       	ldi	r24, 0xCF	; 207
     836:	97 e0       	ldi	r25, 0x07	; 7
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <DS_isPresent+0x20>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <DS_isPresent+0x26>
     83e:	00 00       	nop
	_delay_us(500);
	DSDDR &= ~(1<<DSBIT);
     840:	84 b3       	in	r24, 0x14	; 20
     842:	82 23       	and	r24, r18
     844:	84 bb       	out	0x14, r24	; 20
     846:	87 e1       	ldi	r24, 0x17	; 23
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <DS_isPresent+0x32>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <DS_isPresent+0x38>
     850:	00 00       	nop
	_delay_us(70);
	if (DSPIN&(1<<DSBIT))
     852:	83 b3       	in	r24, 0x13	; 19
     854:	8f e8       	ldi	r24, 0x8F	; 143
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <DS_isPresent+0x40>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <DS_isPresent+0x46>
     85e:	00 00       	nop
		r = 0;
	}
	r = 1;
	_delay_us(420);
	return r;
}
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	08 95       	ret

00000866 <DS_Send_Byte>:
{
	for (int i=0; i<8; i++)
	{
		if (b&0x01)
		{
			DSDDR |= 1<<DSBIT;
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <DS_Send_Byte+0xa>
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <DS_Send_Byte+0x6>
			DSPORT &= ~(1<<DSBIT);
     874:	32 2f       	mov	r19, r18
     876:	30 95       	com	r19
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	90 e0       	ldi	r25, 0x00	; 0

void DS_Send_Byte(byte DSBIT, byte b)
{
	for (int i=0; i<8; i++)
	{
		if (b&0x01)
     87c:	60 ff       	sbrs	r22, 0
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <DS_Send_Byte+0x42>
		{
			DSDDR |= 1<<DSBIT;
     880:	44 b3       	in	r20, 0x14	; 20
     882:	42 2b       	or	r20, r18
     884:	44 bb       	out	0x14, r20	; 20
			DSPORT &= ~(1<<DSBIT);
     886:	45 b3       	in	r20, 0x15	; 21
     888:	43 23       	and	r20, r19
     88a:	45 bb       	out	0x15, r20	; 21
     88c:	4a e1       	ldi	r20, 0x1A	; 26
     88e:	4a 95       	dec	r20
     890:	f1 f7       	brne	.-4      	; 0x88e <DS_Send_Byte+0x28>
     892:	00 c0       	rjmp	.+0      	; 0x894 <DS_Send_Byte+0x2e>
			_delay_us(5);
			DSDDR &= ~(1<<DSBIT);
     894:	44 b3       	in	r20, 0x14	; 20
     896:	43 23       	and	r20, r19
     898:	44 bb       	out	0x14, r20	; 20
     89a:	eb ed       	ldi	r30, 0xDB	; 219
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <DS_Send_Byte+0x38>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <DS_Send_Byte+0x3e>
     8a4:	00 00       	nop
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <DS_Send_Byte+0x60>
			_delay_us(55);
		}else
		{
			DSDDR |= 1<<DSBIT;
     8a8:	44 b3       	in	r20, 0x14	; 20
     8aa:	42 2b       	or	r20, r18
     8ac:	44 bb       	out	0x14, r20	; 20
			DSPORT &= ~(1<<DSBIT);
     8ae:	45 b3       	in	r20, 0x15	; 21
     8b0:	43 23       	and	r20, r19
     8b2:	45 bb       	out	0x15, r20	; 21
     8b4:	ef ee       	ldi	r30, 0xEF	; 239
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <DS_Send_Byte+0x52>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <DS_Send_Byte+0x58>
     8be:	00 00       	nop
			_delay_us(60);
			DSDDR &= ~(1<<DSBIT);
     8c0:	44 b3       	in	r20, 0x14	; 20
     8c2:	43 23       	and	r20, r19
     8c4:	44 bb       	out	0x14, r20	; 20
     8c6:	01 97       	sbiw	r24, 0x01	; 1
	return res;
}

void DS_Send_Byte(byte DSBIT, byte b)
{
	for (int i=0; i<8; i++)
     8c8:	11 f0       	breq	.+4      	; 0x8ce <DS_Send_Byte+0x68>
			DSPORT &= ~(1<<DSBIT);
			_delay_us(60);
			DSDDR &= ~(1<<DSBIT);
			//_delay_us(10);
		}
		b = b >> 1;
     8ca:	66 95       	lsr	r22
     8cc:	d7 cf       	rjmp	.-82     	; 0x87c <DS_Send_Byte+0x16>
     8ce:	08 95       	ret

000008d0 <DS_Init>:
	_delay_us(420);
	return r;
}

void DS_Init(byte DSBIT)
{
     8d0:	1f 93       	push	r17
     8d2:	18 2f       	mov	r17, r24
	if (DS_isPresent(DSBIT))
     8d4:	a1 df       	rcall	.-190    	; 0x818 <DS_isPresent>
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	a9 f0       	breq	.+42     	; 0x904 <DS_Init+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8da:	8f e9       	ldi	r24, 0x9F	; 159
     8dc:	9f e0       	ldi	r25, 0x0F	; 15
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <DS_Init+0xe>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <DS_Init+0x14>
     8e4:	00 00       	nop
	{
		_delay_ms(1);
		//DS_Send_Byte(0x33);
		DS_Send_Byte(DSBIT, 0xCC);
     8e6:	81 2f       	mov	r24, r17
     8e8:	6c ec       	ldi	r22, 0xCC	; 204
     8ea:	bd df       	rcall	.-134    	; 0x866 <DS_Send_Byte>
		DS_Send_Byte(DSBIT, 0x44);
     8ec:	81 2f       	mov	r24, r17
     8ee:	64 e4       	ldi	r22, 0x44	; 68
     8f0:	ba df       	rcall	.-140    	; 0x866 <DS_Send_Byte>
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	93 ed       	ldi	r25, 0xD3	; 211
     8f6:	a0 e3       	ldi	r26, 0x30	; 48
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	a0 40       	sbci	r26, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <DS_Init+0x28>
     900:	00 c0       	rjmp	.+0      	; 0x902 <DS_Init+0x32>
     902:	00 00       	nop
		_delay_ms(1000);
		//while (!DS_Read_Bit()){}
	}
}
     904:	1f 91       	pop	r17
     906:	08 95       	ret

00000908 <DS_Read_Bit>:
}

byte DS_Read_Bit(byte DSBIT)
{
	byte r = 0;
		DSDDR |= 1<<DSBIT;
     908:	94 b3       	in	r25, 0x14	; 20
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	08 2e       	mov	r0, r24
     910:	02 c0       	rjmp	.+4      	; 0x916 <DS_Read_Bit+0xe>
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <DS_Read_Bit+0xa>
     91a:	92 2b       	or	r25, r18
     91c:	94 bb       	out	0x14, r25	; 20
		DSPORT &= ~(1<<DSBIT);
     91e:	95 b3       	in	r25, 0x15	; 21
     920:	20 95       	com	r18
     922:	92 23       	and	r25, r18
     924:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     926:	95 e0       	ldi	r25, 0x05	; 5
     928:	9a 95       	dec	r25
     92a:	f1 f7       	brne	.-4      	; 0x928 <DS_Read_Bit+0x20>
     92c:	00 00       	nop
		_delay_us(1);
		DSDDR &= ~(1<<DSBIT);
     92e:	94 b3       	in	r25, 0x14	; 20
     930:	92 23       	and	r25, r18
     932:	94 bb       	out	0x14, r25	; 20
     934:	e5 e3       	ldi	r30, 0x35	; 53
     936:	ea 95       	dec	r30
     938:	f1 f7       	brne	.-4      	; 0x936 <DS_Read_Bit+0x2e>
     93a:	00 00       	nop
		_delay_us(10);
		if (DSPIN&(1<<DSBIT))
     93c:	23 b3       	in	r18, 0x13	; 19
     93e:	e7 ec       	ldi	r30, 0xC7	; 199
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <DS_Read_Bit+0x3a>
     946:	00 c0       	rjmp	.+0      	; 0x948 <DS_Read_Bit+0x40>
     948:	00 00       	nop
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	02 c0       	rjmp	.+4      	; 0x952 <DS_Read_Bit+0x4a>
     94e:	35 95       	asr	r19
     950:	27 95       	ror	r18
     952:	8a 95       	dec	r24
     954:	e2 f7       	brpl	.-8      	; 0x94e <DS_Read_Bit+0x46>
		{
			r = 1;
		}
		_delay_us(50);
		return r;
}
     956:	82 2f       	mov	r24, r18
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <DS_Read_Byte>:

byte DS_Read_Byte(byte DSBIT)
{
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	08 2f       	mov	r16, r24
     966:	c8 e0       	ldi	r28, 0x08	; 8
     968:	d0 e0       	ldi	r29, 0x00	; 0
	byte b = 0;
     96a:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i<8; i++)
	{
		b = b >> 1;
		b = b | (DS_Read_Bit(DSBIT)<<7);
     96c:	80 2f       	mov	r24, r16
     96e:	cc df       	rcall	.-104    	; 0x908 <DS_Read_Bit>
     970:	87 95       	ror	r24
     972:	88 27       	eor	r24, r24
     974:	87 95       	ror	r24
byte DS_Read_Byte(byte DSBIT)
{
	byte b = 0;
	for (int i=0; i<8; i++)
	{
		b = b >> 1;
     976:	16 95       	lsr	r17
		b = b | (DS_Read_Bit(DSBIT)<<7);
     978:	18 2b       	or	r17, r24
     97a:	21 97       	sbiw	r28, 0x01	; 1
}

byte DS_Read_Byte(byte DSBIT)
{
	byte b = 0;
	for (int i=0; i<8; i++)
     97c:	b9 f7       	brne	.-18     	; 0x96c <DS_Read_Byte+0x10>
	{
		b = b >> 1;
		b = b | (DS_Read_Bit(DSBIT)<<7);
	}
	return b;
}
     97e:	81 2f       	mov	r24, r17
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	08 95       	ret

0000098a <DS_getTemperature>:
		//while (!DS_Read_Bit()){}
	}
}

uint16_t DS_getTemperature(byte DSBIT)
{
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	18 2f       	mov	r17, r24
	if (DS_isPresent(DSBIT))
     992:	42 df       	rcall	.-380    	; 0x818 <DS_isPresent>
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	f9 f0       	breq	.+62     	; 0x9d6 <DS_getTemperature+0x4c>
	{
		//LCD_Clear_Display();
		//_delay_ms(1);
		//DS_Send_Byte(0x33);
		DS_Send_Byte(DSBIT, 0xCC);
     998:	81 2f       	mov	r24, r17
     99a:	6c ec       	ldi	r22, 0xCC	; 204
     99c:	64 df       	rcall	.-312    	; 0x866 <DS_Send_Byte>
		DS_Send_Byte(DSBIT, 0xBE);
     99e:	81 2f       	mov	r24, r17
     9a0:	6e eb       	ldi	r22, 0xBE	; 190
     9a2:	61 df       	rcall	.-318    	; 0x866 <DS_Send_Byte>
		{
			byte b = DS_Read_Byte();
			LCD_Show_Byte(b);
		}*/
		
		byte b0 = DS_Read_Byte(DSBIT);
     9a4:	81 2f       	mov	r24, r17
     9a6:	da df       	rcall	.-76     	; 0x95c <DS_Read_Byte>
     9a8:	08 2f       	mov	r16, r24
		byte b1 = DS_Read_Byte(DSBIT);
     9aa:	81 2f       	mov	r24, r17
     9ac:	d7 df       	rcall	.-82     	; 0x95c <DS_Read_Byte>
     9ae:	f8 2e       	mov	r15, r24
		byte b2 = DS_Read_Byte(DSBIT);
     9b0:	81 2f       	mov	r24, r17
     9b2:	d4 df       	rcall	.-88     	; 0x95c <DS_Read_Byte>
		byte b3 = DS_Read_Byte(DSBIT);
     9b4:	81 2f       	mov	r24, r17
     9b6:	d2 df       	rcall	.-92     	; 0x95c <DS_Read_Byte>
		byte b4 = DS_Read_Byte(DSBIT);
     9b8:	81 2f       	mov	r24, r17
     9ba:	d0 df       	rcall	.-96     	; 0x95c <DS_Read_Byte>
		byte b5 = DS_Read_Byte(DSBIT);
     9bc:	81 2f       	mov	r24, r17
     9be:	ce df       	rcall	.-100    	; 0x95c <DS_Read_Byte>
		byte b6 = DS_Read_Byte(DSBIT);
     9c0:	81 2f       	mov	r24, r17
     9c2:	cc df       	rcall	.-104    	; 0x95c <DS_Read_Byte>
		byte b7 = DS_Read_Byte(DSBIT);
     9c4:	81 2f       	mov	r24, r17
     9c6:	ca df       	rcall	.-108    	; 0x95c <DS_Read_Byte>
		byte b8 = DS_Read_Byte(DSBIT);
     9c8:	81 2f       	mov	r24, r17
     9ca:	c8 df       	rcall	.-112    	; 0x95c <DS_Read_Byte>
		//float temp = 0;
		uint16_t tempInt = (b1<<8)+b0;
		//temp = (tempInt>>4)&0x7F;
		return (b1<<8)+b0;
     9cc:	3f 2d       	mov	r19, r15
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	20 0f       	add	r18, r16
     9d2:	31 1d       	adc	r19, r1
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DS_getTemperature+0x50>
	}
	return 0;
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
}
     9da:	c9 01       	movw	r24, r18
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	08 95       	ret

000009e4 <DS_getFloatTemperature>:

float DS_getFloatTemperature(byte DSBIT)
{
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
	float res;
	uint16_t temp = DS_getTemperature(DSBIT);
     9f8:	c8 df       	rcall	.-112    	; 0x98a <DS_getTemperature>
     9fa:	9c 01       	movw	r18, r24
	float sign = 1;
	if ((temp&(1<<15))!=0)
     9fc:	97 ff       	sbrs	r25, 7
     9fe:	0e c0       	rjmp	.+28     	; 0xa1c <DS_getFloatTemperature+0x38>
	{
		sign = -1;
		temp = 0xFFFF-(unsigned int)temp;
		temp++;
     a00:	30 95       	com	r19
     a02:	21 95       	neg	r18
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
	float res;
	uint16_t temp = DS_getTemperature(DSBIT);
	float sign = 1;
	if ((temp&(1<<15))!=0)
	{
		sign = -1;
     a06:	0f 2e       	mov	r0, r31
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ef 2e       	mov	r14, r31
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ff 2e       	mov	r15, r31
     a10:	f0 e8       	ldi	r31, 0x80	; 128
     a12:	0f 2f       	mov	r16, r31
     a14:	ff eb       	ldi	r31, 0xBF	; 191
     a16:	1f 2f       	mov	r17, r31
     a18:	f0 2d       	mov	r31, r0
     a1a:	0a c0       	rjmp	.+20     	; 0xa30 <DS_getFloatTemperature+0x4c>

float DS_getFloatTemperature(byte DSBIT)
{
	float res;
	uint16_t temp = DS_getTemperature(DSBIT);
	float sign = 1;
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ef 2e       	mov	r14, r31
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 e8       	ldi	r31, 0x80	; 128
     a28:	0f 2f       	mov	r16, r31
     a2a:	ff e3       	ldi	r31, 0x3F	; 63
     a2c:	1f 2f       	mov	r17, r31
     a2e:	f0 2d       	mov	r31, r0
		sign = -1;
		temp = 0xFFFF-(unsigned int)temp;
		temp++;
	}
	
	int drob = temp&0x0F;
     a30:	b9 01       	movw	r22, r18
     a32:	6f 70       	andi	r22, 0x0F	; 15
     a34:	70 70       	andi	r23, 0x00	; 0
	drob = drob * 625;
     a36:	41 e7       	ldi	r20, 0x71	; 113
     a38:	52 e0       	ldi	r21, 0x02	; 2
     a3a:	64 9f       	mul	r22, r20
     a3c:	c0 01       	movw	r24, r0
     a3e:	65 9f       	mul	r22, r21
     a40:	90 0d       	add	r25, r0
     a42:	74 9f       	mul	r23, r20
     a44:	90 0d       	add	r25, r0
     a46:	11 24       	eor	r1, r1
	int ss = drob % 1000;
	drob = drob / 1000;
     a48:	68 ee       	ldi	r22, 0xE8	; 232
     a4a:	73 e0       	ldi	r23, 0x03	; 3
     a4c:	8c d9       	rcall	.-3304   	; 0xfffffd66 <__eeprom_end+0xff7efd54>
     a4e:	eb 01       	movw	r28, r22
	if (ss>=500)
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	84 3f       	cpi	r24, 0xF4	; 244
     a54:	94 07       	cpc	r25, r20
     a56:	0c f0       	brlt	.+2      	; 0xa5a <DS_getFloatTemperature+0x76>
		drob++;
     a58:	21 96       	adiw	r28, 0x01	; 1
	temp = (temp>>4)&0x7F;
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	36 95       	lsr	r19
     a5e:	27 95       	ror	r18
     a60:	8a 95       	dec	r24
     a62:	e1 f7       	brne	.-8      	; 0xa5c <DS_getFloatTemperature+0x78>
     a64:	2f 77       	andi	r18, 0x7F	; 127
     a66:	30 70       	andi	r19, 0x00	; 0
	res = temp+(drob/10.0);
     a68:	b9 01       	movw	r22, r18
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0a d7       	rcall	.+3604   	; 0x1884 <__floatunsisf>
     a70:	5b 01       	movw	r10, r22
     a72:	6c 01       	movw	r12, r24
     a74:	be 01       	movw	r22, r28
     a76:	88 27       	eor	r24, r24
     a78:	77 fd       	sbrc	r23, 7
     a7a:	80 95       	com	r24
     a7c:	98 2f       	mov	r25, r24
     a7e:	57 d6       	rcall	.+3246   	; 0x172e <__floatsisf>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e2       	ldi	r20, 0x20	; 32
     a86:	51 e4       	ldi	r21, 0x41	; 65
     a88:	28 d5       	rcall	.+2640   	; 0x14da <__divsf3>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	c6 01       	movw	r24, r12
     a90:	b5 01       	movw	r22, r10
     a92:	dc d3       	rcall	.+1976   	; 0x124c <__addsf3>
	res = res*sign;
     a94:	a8 01       	movw	r20, r16
     a96:	97 01       	movw	r18, r14
     a98:	2b d4       	rcall	.+2134   	; 0x12f0 <__mulsf3>
	return res;
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	08 95       	ret

00000ab0 <LCD_getChar>:
	LCD_Show_Byte(d&0xFF);
}*/

char LCD_getChar(byte d)
{
	if (d<10)
     ab0:	8a 30       	cpi	r24, 0x0A	; 10
     ab2:	10 f4       	brcc	.+4      	; 0xab8 <LCD_getChar+0x8>
	{
		return d+'0';
     ab4:	80 5d       	subi	r24, 0xD0	; 208
     ab6:	08 95       	ret
	}
	return d+'A'-10;
     ab8:	89 5c       	subi	r24, 0xC9	; 201
}
     aba:	08 95       	ret

00000abc <LCD_Send_Data>:



void LCD_Send_Data(byte q)
{
	Select_DataRegister;
     abc:	97 9a       	sbi	0x12, 7	; 18
	Write_Lcd;	
     abe:	96 98       	cbi	0x12, 6	; 18
	CONTROL_PORT&= 0xF0;
     ac0:	92 b3       	in	r25, 0x12	; 18
     ac2:	90 7f       	andi	r25, 0xF0	; 240
     ac4:	92 bb       	out	0x12, r25	; 18
	CONTROL_PORT|= (q>>4)&0x0F;
     ac6:	22 b3       	in	r18, 0x12	; 18
     ac8:	98 2f       	mov	r25, r24
     aca:	92 95       	swap	r25
     acc:	9f 70       	andi	r25, 0x0F	; 15
     ace:	92 2b       	or	r25, r18
     ad0:	92 bb       	out	0x12, r25	; 18
	Set_Enable;
     ad2:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad4:	ef e9       	ldi	r30, 0x9F	; 159
     ad6:	ff e0       	ldi	r31, 0x0F	; 15
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <LCD_Send_Data+0x1c>
     adc:	00 c0       	rjmp	.+0      	; 0xade <LCD_Send_Data+0x22>
     ade:	00 00       	nop
	_delay_ms(1);
	Clear_Enable;
     ae0:	95 98       	cbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae2:	ef ec       	ldi	r30, 0xCF	; 207
     ae4:	f7 e0       	ldi	r31, 0x07	; 7
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <LCD_Send_Data+0x2a>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <LCD_Send_Data+0x30>
     aec:	00 00       	nop
	_delay_us(500);
	CONTROL_PORT&= 0xF0;
     aee:	92 b3       	in	r25, 0x12	; 18
     af0:	90 7f       	andi	r25, 0xF0	; 240
     af2:	92 bb       	out	0x12, r25	; 18
	CONTROL_PORT|= q&0x0F;
     af4:	92 b3       	in	r25, 0x12	; 18
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	89 2b       	or	r24, r25
     afa:	82 bb       	out	0x12, r24	; 18
	Set_Enable;
     afc:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afe:	8f e9       	ldi	r24, 0x9F	; 159
     b00:	9f e0       	ldi	r25, 0x0F	; 15
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <LCD_Send_Data+0x46>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCD_Send_Data+0x4c>
     b08:	00 00       	nop
	_delay_ms(1);
	Clear_Enable;
     b0a:	95 98       	cbi	0x12, 5	; 18
}
     b0c:	08 95       	ret

00000b0e <LCD_Send_Instruction>:

void LCD_Send_Instruction(byte q)
{
	Select_InstructionRegister;
     b0e:	97 98       	cbi	0x12, 7	; 18
	Write_Lcd;
     b10:	96 98       	cbi	0x12, 6	; 18
	CONTROL_PORT&= 0xF0;
     b12:	92 b3       	in	r25, 0x12	; 18
     b14:	90 7f       	andi	r25, 0xF0	; 240
     b16:	92 bb       	out	0x12, r25	; 18
	CONTROL_PORT|= (q>>4)&0x0F;
     b18:	22 b3       	in	r18, 0x12	; 18
     b1a:	98 2f       	mov	r25, r24
     b1c:	92 95       	swap	r25
     b1e:	9f 70       	andi	r25, 0x0F	; 15
     b20:	92 2b       	or	r25, r18
     b22:	92 bb       	out	0x12, r25	; 18
	Set_Enable;
     b24:	95 9a       	sbi	0x12, 5	; 18
     b26:	ef e9       	ldi	r30, 0x9F	; 159
     b28:	ff e0       	ldi	r31, 0x0F	; 15
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <LCD_Send_Instruction+0x1c>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <LCD_Send_Instruction+0x22>
     b30:	00 00       	nop
	_delay_ms(1);
	Clear_Enable;
     b32:	95 98       	cbi	0x12, 5	; 18
     b34:	ef eb       	ldi	r30, 0xBF	; 191
     b36:	fd e5       	ldi	r31, 0x5D	; 93
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <LCD_Send_Instruction+0x2a>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <LCD_Send_Instruction+0x30>
     b3e:	00 00       	nop
	_delay_ms(6);
	CONTROL_PORT&= 0xF0;
     b40:	92 b3       	in	r25, 0x12	; 18
     b42:	90 7f       	andi	r25, 0xF0	; 240
     b44:	92 bb       	out	0x12, r25	; 18
	CONTROL_PORT|= q&0x0F;
     b46:	92 b3       	in	r25, 0x12	; 18
     b48:	8f 70       	andi	r24, 0x0F	; 15
     b4a:	89 2b       	or	r24, r25
     b4c:	82 bb       	out	0x12, r24	; 18
	Set_Enable;
     b4e:	95 9a       	sbi	0x12, 5	; 18
     b50:	8f e9       	ldi	r24, 0x9F	; 159
     b52:	9f e0       	ldi	r25, 0x0F	; 15
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <LCD_Send_Instruction+0x46>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <LCD_Send_Instruction+0x4c>
     b5a:	00 00       	nop
	_delay_ms(1);
	Clear_Enable;
     b5c:	95 98       	cbi	0x12, 5	; 18
     b5e:	ef eb       	ldi	r30, 0xBF	; 191
     b60:	fd e5       	ldi	r31, 0x5D	; 93
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <LCD_Send_Instruction+0x54>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <LCD_Send_Instruction+0x5a>
     b68:	00 00       	nop
	_delay_ms(6);	
}
     b6a:	08 95       	ret

00000b6c <LCD_Move_Cursor>:
}

void LCD_Move_Cursor(byte position)
{
	byte p = 128;
	if (position>15)
     b6c:	80 31       	cpi	r24, 0x10	; 16
     b6e:	18 f0       	brcs	.+6      	; 0xb76 <LCD_Move_Cursor+0xa>
	{
		p = p+40;
		position = position-16;
     b70:	80 51       	subi	r24, 0x10	; 16
void LCD_Move_Cursor(byte position)
{
	byte p = 128;
	if (position>15)
	{
		p = p+40;
     b72:	98 ea       	ldi	r25, 0xA8	; 168
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <LCD_Move_Cursor+0xc>
	LCD_Send_Instruction(0x01);
}

void LCD_Move_Cursor(byte position)
{
	byte p = 128;
     b76:	90 e8       	ldi	r25, 0x80	; 128
	{
		p = p+40;
		position = position-16;
	}
	p = p+position;
	LCD_Send_Instruction(p);
     b78:	89 0f       	add	r24, r25
     b7a:	c9 df       	rcall	.-110    	; 0xb0e <LCD_Send_Instruction>
}
     b7c:	08 95       	ret

00000b7e <LCD_Clear_Display>:
	LCD_Send_Instruction(0x0C);
}

void LCD_Clear_Display()
{
	LCD_Send_Instruction(0x01);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	c6 df       	rcall	.-116    	; 0xb0e <LCD_Send_Instruction>
}
     b82:	08 95       	ret

00000b84 <LCD_Init>:
	return d+'A'-10;
}

void LCD_Init(void)
{
	CONTROL_DDR = 0xFF;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	81 bb       	out	0x11, r24	; 17
	CONTROL_PORT = 0x00;
     b88:	12 ba       	out	0x12, r1	; 18
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	96 e7       	ldi	r25, 0x76	; 118
     b8e:	a1 e0       	ldi	r26, 0x01	; 1
     b90:	81 50       	subi	r24, 0x01	; 1
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	a0 40       	sbci	r26, 0x00	; 0
     b96:	e1 f7       	brne	.-8      	; 0xb90 <LCD_Init+0xc>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <LCD_Init+0x16>
     b9a:	00 00       	nop
	_delay_ms(30);
	Select_InstructionRegister;
     b9c:	97 98       	cbi	0x12, 7	; 18
	Write_Lcd;	
     b9e:	96 98       	cbi	0x12, 6	; 18
	CONTROL_PORT&= 0xF0;
     ba0:	82 b3       	in	r24, 0x12	; 18
     ba2:	80 7f       	andi	r24, 0xF0	; 240
     ba4:	82 bb       	out	0x12, r24	; 18
	CONTROL_PORT|= 0x03;
     ba6:	82 b3       	in	r24, 0x12	; 18
     ba8:	83 60       	ori	r24, 0x03	; 3
     baa:	82 bb       	out	0x12, r24	; 18
     bac:	af e1       	ldi	r26, 0x1F	; 31
     bae:	be e4       	ldi	r27, 0x4E	; 78
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <LCD_Init+0x2c>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <LCD_Init+0x32>
     bb6:	00 00       	nop
	_delay_ms(5);
	CONTROL_PORT&= 0xF0;
     bb8:	82 b3       	in	r24, 0x12	; 18
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	82 bb       	out	0x12, r24	; 18
	CONTROL_PORT|= 0x03;
     bbe:	82 b3       	in	r24, 0x12	; 18
     bc0:	83 60       	ori	r24, 0x03	; 3
     bc2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc4:	87 ee       	ldi	r24, 0xE7	; 231
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <LCD_Init+0x44>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <LCD_Init+0x4a>
     bce:	00 00       	nop
	_delay_us(250);

	CONTROL_PORT&= 0xF0;
     bd0:	82 b3       	in	r24, 0x12	; 18
     bd2:	80 7f       	andi	r24, 0xF0	; 240
     bd4:	82 bb       	out	0x12, r24	; 18
	CONTROL_PORT|= 0x03;
     bd6:	82 b3       	in	r24, 0x12	; 18
     bd8:	83 60       	ori	r24, 0x03	; 3
     bda:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bdc:	af e1       	ldi	r26, 0x1F	; 31
     bde:	be e4       	ldi	r27, 0x4E	; 78
     be0:	11 97       	sbiw	r26, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <LCD_Init+0x5c>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <LCD_Init+0x62>
     be6:	00 00       	nop
	_delay_ms(5);

	CONTROL_PORT&= 0xF0;
     be8:	82 b3       	in	r24, 0x12	; 18
     bea:	80 7f       	andi	r24, 0xF0	; 240
     bec:	82 bb       	out	0x12, r24	; 18
	CONTROL_PORT|= 0x02;
     bee:	91 9a       	sbi	0x12, 1	; 18
	//_delay_ms(6);
	Set_Enable;
     bf0:	95 9a       	sbi	0x12, 5	; 18
     bf2:	8f eb       	ldi	r24, 0xBF	; 191
     bf4:	9d e5       	ldi	r25, 0x5D	; 93
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <LCD_Init+0x72>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <LCD_Init+0x78>
     bfc:	00 00       	nop
	_delay_ms(6);
	Clear_Enable;
     bfe:	95 98       	cbi	0x12, 5	; 18
	LCD_Send_Instruction(0x28);
     c00:	88 e2       	ldi	r24, 0x28	; 40
     c02:	85 df       	rcall	.-246    	; 0xb0e <LCD_Send_Instruction>
	LCD_Send_Instruction(0x08);
     c04:	88 e0       	ldi	r24, 0x08	; 8
     c06:	83 df       	rcall	.-250    	; 0xb0e <LCD_Send_Instruction>
	LCD_Send_Instruction(0x01);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	81 df       	rcall	.-254    	; 0xb0e <LCD_Send_Instruction>
	LCD_Send_Instruction(0x06);
     c0c:	86 e0       	ldi	r24, 0x06	; 6
     c0e:	7f df       	rcall	.-258    	; 0xb0e <LCD_Send_Instruction>
	LCD_Send_Instruction(0x0C);
     c10:	8c e0       	ldi	r24, 0x0C	; 12
     c12:	7d df       	rcall	.-262    	; 0xb0e <LCD_Send_Instruction>
}
     c14:	08 95       	ret

00000c16 <LCD_printStr>:
	Clear_Enable;
	_delay_ms(6);	
}

void LCD_printStr(char * s)
{
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	e8 2e       	mov	r14, r24
     c20:	e7 01       	movw	r28, r14
     c22:	7e 01       	movw	r14, r28
     c24:	f9 2e       	mov	r15, r25
     c26:	e7 01       	movw	r28, r14
	while (*s)
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <LCD_printStr+0x16>
	{
		LCD_Send_Data(*s);
     c2a:	48 df       	rcall	.-368    	; 0xabc <LCD_Send_Data>
	_delay_ms(6);	
}

void LCD_printStr(char * s)
{
	while (*s)
     c2c:	89 91       	ld	r24, Y+
     c2e:	88 23       	and	r24, r24
     c30:	e1 f7       	brne	.-8      	; 0xc2a <LCD_printStr+0x14>
	{
		LCD_Send_Data(*s);
		s++;
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <LCD_2buffer_begin>:

void LCD_2buffer_begin()
{
	memset(LCD_buffer, ' ', 40);
     c3c:	8e eb       	ldi	r24, 0xBE	; 190
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	60 e2       	ldi	r22, 0x20	; 32
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	48 e2       	ldi	r20, 0x28	; 40
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	fa d8       	rcall	.-3596   	; 0xfffffe3e <__eeprom_end+0xff7efe2c>
	LCD_pointer = 0;
     c4a:	10 92 97 01 	sts	0x0197, r1
}
     c4e:	08 95       	ret

00000c50 <LCD_2buffer_end>:
void LCD_2buffer_end()
{	
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
	int i;
	LCD_Move_Cursor(0);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	8a df       	rcall	.-236    	; 0xb6c <LCD_Move_Cursor>
     c58:	ce eb       	ldi	r28, 0xBE	; 190
     c5a:	d1 e0       	ldi	r29, 0x01	; 1
	for (i=0; i<16; i++)
	{	
		LCD_Send_Data(LCD_buffer[i]);
     c5c:	89 91       	ld	r24, Y+
     c5e:	2e df       	rcall	.-420    	; 0xabc <LCD_Send_Data>
}
void LCD_2buffer_end()
{	
	int i;
	LCD_Move_Cursor(0);
	for (i=0; i<16; i++)
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	ce 3c       	cpi	r28, 0xCE	; 206
     c64:	d8 07       	cpc	r29, r24
     c66:	d1 f7       	brne	.-12     	; 0xc5c <LCD_2buffer_end+0xc>
	{	
		LCD_Send_Data(LCD_buffer[i]);
	}

	LCD_Move_Cursor(16);
     c68:	80 e1       	ldi	r24, 0x10	; 16
     c6a:	80 df       	rcall	.-256    	; 0xb6c <LCD_Move_Cursor>
	for (i=0; i<16; i++)
	{	
		LCD_Send_Data(LCD_buffer[16+i]);
     c6c:	89 91       	ld	r24, Y+
     c6e:	26 df       	rcall	.-436    	; 0xabc <LCD_Send_Data>
	{	
		LCD_Send_Data(LCD_buffer[i]);
	}

	LCD_Move_Cursor(16);
	for (i=0; i<16; i++)
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	ce 3d       	cpi	r28, 0xDE	; 222
     c74:	d8 07       	cpc	r29, r24
     c76:	d1 f7       	brne	.-12     	; 0xc6c <LCD_2buffer_end+0x1c>
	{	
		LCD_Send_Data(LCD_buffer[16+i]);
	}
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <LCD_2buffer_printStr>:

void LCD_2buffer_printStr(char * s)
{
     c7e:	28 2f       	mov	r18, r24
     c80:	39 2f       	mov	r19, r25
     c82:	d9 01       	movw	r26, r18
	while (*s)
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <LCD_2buffer_printStr+0x1c>
	{
		LCD_buffer[LCD_pointer++] = *s;
     c86:	90 91 97 01 	lds	r25, 0x0197
     c8a:	e9 2f       	mov	r30, r25
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	e2 54       	subi	r30, 0x42	; 66
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 83       	st	Z, r24
     c94:	9f 5f       	subi	r25, 0xFF	; 255
     c96:	90 93 97 01 	sts	0x0197, r25
	}
}

void LCD_2buffer_printStr(char * s)
{
	while (*s)
     c9a:	8d 91       	ld	r24, X+
     c9c:	88 23       	and	r24, r24
     c9e:	99 f7       	brne	.-26     	; 0xc86 <LCD_2buffer_printStr+0x8>
	{
		LCD_buffer[LCD_pointer++] = *s;
		s++;
	}
}
     ca0:	08 95       	ret

00000ca2 <LCD_2buffer_Move_Cursor>:

void LCD_2buffer_Move_Cursor(byte position)
{
	LCD_pointer = position;
     ca2:	80 93 97 01 	sts	0x0197, r24
}
     ca6:	08 95       	ret

00000ca8 <LCD_2buffer_Print_Number>:

void LCD_2buffer_Print_Number(int16_t f)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <LCD_2buffer_Print_Number+0xa>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <LCD_2buffer_Print_Number+0xc>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <LCD_2buffer_Print_Number+0xe>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	byte buffer[6];
	int n = 0;
	if (f==0)
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	61 f4       	brne	.+24     	; 0xcd6 <LCD_2buffer_Print_Number+0x2e>
	{
		LCD_buffer[LCD_pointer++] = '0';
     cbe:	80 91 97 01 	lds	r24, 0x0197
     cc2:	e8 2f       	mov	r30, r24
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	e2 54       	subi	r30, 0x42	; 66
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	90 e3       	ldi	r25, 0x30	; 48
     ccc:	90 83       	st	Z, r25
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	80 93 97 01 	sts	0x0197, r24
		return;
     cd4:	35 c0       	rjmp	.+106    	; 0xd40 <LCD_2buffer_Print_Number+0x98>
	}
	if (f<0)
     cd6:	97 ff       	sbrs	r25, 7
     cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <LCD_2buffer_Print_Number+0x4e>
	{
		LCD_buffer[LCD_pointer++] = '-';
     cda:	20 91 97 01 	lds	r18, 0x0197
     cde:	e2 2f       	mov	r30, r18
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	e2 54       	subi	r30, 0x42	; 66
     ce4:	fe 4f       	sbci	r31, 0xFE	; 254
     ce6:	3d e2       	ldi	r19, 0x2D	; 45
     ce8:	30 83       	st	Z, r19
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	20 93 97 01 	sts	0x0197, r18
		f = -f;
     cf0:	90 95       	com	r25
     cf2:	81 95       	neg	r24
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	fe 01       	movw	r30, r28
     cf8:	31 96       	adiw	r30, 0x01	; 1
	}
	while (f>0)
	{
		buffer[n++] = f%10;
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	0a e0       	ldi	r16, 0x0A	; 10
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	b8 01       	movw	r22, r16
     d04:	30 d8       	rcall	.-4000   	; 0xfffffd66 <__eeprom_end+0xff7efd54>
     d06:	81 93       	st	Z+, r24
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	3f 4f       	sbci	r19, 0xFF	; 255
		f = f/10;
     d0c:	cb 01       	movw	r24, r22
	if (f<0)
	{
		LCD_buffer[LCD_pointer++] = '-';
		f = -f;
	}
	while (f>0)
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	c1 f7       	brne	.-16     	; 0xd02 <LCD_2buffer_Print_Number+0x5a>
     d12:	60 91 97 01 	lds	r22, 0x0197
void LCD_2buffer_Move_Cursor(byte position)
{
	LCD_pointer = position;
}

void LCD_2buffer_Print_Number(int16_t f)
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	fc 01       	movw	r30, r24
     d1c:	e2 0f       	add	r30, r18
     d1e:	f3 1f       	adc	r31, r19
	while (f>0)
	{
		buffer[n++] = f%10;
		f = f/10;
	}
	for (int i = n-1; i>=0; i--)
     d20:	46 2f       	mov	r20, r22
     d22:	08 c0       	rjmp	.+16     	; 0xd34 <LCD_2buffer_Print_Number+0x8c>
	{
		LCD_buffer[LCD_pointer++] = buffer[i]+'0';
     d24:	a4 2f       	mov	r26, r20
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	a2 54       	subi	r26, 0x42	; 66
     d2a:	be 4f       	sbci	r27, 0xFE	; 254
     d2c:	52 91       	ld	r21, -Z
     d2e:	50 5d       	subi	r21, 0xD0	; 208
     d30:	5c 93       	st	X, r21
     d32:	4f 5f       	subi	r20, 0xFF	; 255
	while (f>0)
	{
		buffer[n++] = f%10;
		f = f/10;
	}
	for (int i = n-1; i>=0; i--)
     d34:	e8 17       	cp	r30, r24
     d36:	f9 07       	cpc	r31, r25
     d38:	a9 f7       	brne	.-22     	; 0xd24 <LCD_2buffer_Print_Number+0x7c>
     d3a:	26 0f       	add	r18, r22
     d3c:	20 93 97 01 	sts	0x0197, r18
	{
		LCD_buffer[LCD_pointer++] = buffer[i]+'0';
		//LCD_Send_Data(buffer[i]+'0');
	}
}
     d40:	26 96       	adiw	r28, 0x06	; 6
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <LCD_2buffer_Show_FloatTemperature1>:

void LCD_2buffer_Show_FloatTemperature1(float f)
{
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	7b 01       	movw	r14, r22
     d60:	8c 01       	movw	r16, r24
	if (f<0)
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a9 01       	movw	r20, r18
     d68:	b7 d4       	rcall	.+2414   	; 0x16d8 <__ltsf2>
     d6a:	90 91 97 01 	lds	r25, 0x0197
     d6e:	87 ff       	sbrs	r24, 7
     d70:	0e c0       	rjmp	.+28     	; 0xd8e <LCD_2buffer_Show_FloatTemperature1+0x38>
	{
		LCD_buffer[LCD_pointer++]='-';
     d72:	e9 2f       	mov	r30, r25
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e2 54       	subi	r30, 0x42	; 66
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	8d e2       	ldi	r24, 0x2D	; 45
     d7c:	80 83       	st	Z, r24
     d7e:	9f 5f       	subi	r25, 0xFF	; 255
     d80:	90 93 97 01 	sts	0x0197, r25
		f = -f;
     d84:	17 fb       	bst	r17, 7
     d86:	10 95       	com	r17
     d88:	17 f9       	bld	r17, 7
     d8a:	10 95       	com	r17
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <LCD_2buffer_Show_FloatTemperature1+0x4a>
	}else
	{
		LCD_buffer[LCD_pointer++]='+';
     d8e:	e9 2f       	mov	r30, r25
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	e2 54       	subi	r30, 0x42	; 66
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	8b e2       	ldi	r24, 0x2B	; 43
     d98:	80 83       	st	Z, r24
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	90 93 97 01 	sts	0x0197, r25
	}
	uint16_t first = (uint16_t)f;
     da0:	c8 01       	movw	r24, r16
     da2:	b7 01       	movw	r22, r14
     da4:	e3 d0       	rcall	.+454    	; 0xf6c <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
	uint16_t second = ((uint16_t)(f*10))%10;
	LCD_2buffer_Print_Number(first);
     daa:	7e df       	rcall	.-260    	; 0xca8 <LCD_2buffer_Print_Number>
	LCD_buffer[LCD_pointer++]='.';
     dac:	80 91 97 01 	lds	r24, 0x0197
     db0:	e8 2f       	mov	r30, r24
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e2 54       	subi	r30, 0x42	; 66
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	9e e2       	ldi	r25, 0x2E	; 46
     dba:	90 83       	st	Z, r25
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 97 01 	sts	0x0197, r24
	}else
	{
		LCD_buffer[LCD_pointer++]='+';
	}
	uint16_t first = (uint16_t)f;
	uint16_t second = ((uint16_t)(f*10))%10;
     dc2:	c8 01       	movw	r24, r16
     dc4:	b7 01       	movw	r22, r14
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	90 d2       	rcall	.+1312   	; 0x12f0 <__mulsf3>
     dd0:	cd d0       	rcall	.+410    	; 0xf6c <__fixunssfsi>
     dd2:	cb 01       	movw	r24, r22
     dd4:	6a e0       	ldi	r22, 0x0A	; 10
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	b2 d7       	rcall	.+3940   	; 0x1d3e <__udivmodhi4>
	LCD_2buffer_Print_Number(first);
	LCD_buffer[LCD_pointer++]='.';
	LCD_2buffer_Print_Number(second);
     dda:	66 df       	rcall	.-308    	; 0xca8 <LCD_2buffer_Print_Number>
}
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	08 95       	ret

00000de6 <Settings_Read>:

void Settings_Read(uint8_t n)
{
	//setting1.d = 77;
	//return;
	switch(n)
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	49 f0       	breq	.+18     	; 0xdfc <Settings_Read+0x16>
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	79 f0       	breq	.+30     	; 0xe0c <Settings_Read+0x26>
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <Settings_Read+0x34>
	{
		case 1:
			eeprom_read_block (( void *) &setting1 , ( const void *) &EEMEMsetting1 , sizeof(setting1)) ;
     df2:	8e e9       	ldi	r24, 0x9E	; 158
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <Settings_Read+0x1e>
		break;

		case 2:
			eeprom_read_block (( void *) &setting2 , ( const void *) &EEMEMsetting2 , sizeof(setting2)) ;
     dfc:	8c ea       	ldi	r24, 0xAC	; 172
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	66 e0       	ldi	r22, 0x06	; 6
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	46 e0       	ldi	r20, 0x06	; 6
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	21 d8       	rcall	.-4030   	; 0xfffffe4c <__eeprom_end+0xff7efe3a>
		break;
     e0a:	08 95       	ret

		case 3:
			eeprom_read_block (( void *) &setting3 , ( const void *) &EEMEMsetting3 , sizeof(setting3)) ;
     e0c:	83 eb       	ldi	r24, 0xB3	; 179
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	6c e0       	ldi	r22, 0x0C	; 12
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	46 e0       	ldi	r20, 0x06	; 6
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	19 d8       	rcall	.-4046   	; 0xfffffe4c <__eeprom_end+0xff7efe3a>
     e1a:	08 95       	ret

00000e1c <Settings_Init>:
extern Settings setting2;
extern Settings setting3;

void Settings_Init()
{
	Settings_Read(1);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	e3 df       	rcall	.-58     	; 0xde6 <Settings_Read>
	Settings_Read(2);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	e1 df       	rcall	.-62     	; 0xde6 <Settings_Read>
	Settings_Read(3);
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	df df       	rcall	.-66     	; 0xde6 <Settings_Read>
}
     e28:	08 95       	ret

00000e2a <Settings_Write>:
}


void Settings_Write(uint8_t n)
{
	switch(n)
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	49 f0       	breq	.+18     	; 0xe40 <Settings_Write+0x16>
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	79 f0       	breq	.+30     	; 0xe50 <Settings_Write+0x26>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	a1 f4       	brne	.+40     	; 0xe5e <Settings_Write+0x34>
	{
		case 1:
			eeprom_update_block (( void *) &setting1 , ( const void *) &EEMEMsetting1 , sizeof(setting1)) ;
     e36:	8e e9       	ldi	r24, 0x9E	; 158
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <Settings_Write+0x1e>
		break;

		case 2:
			eeprom_update_block (( void *) &setting2 , ( const void *) &EEMEMsetting2 , sizeof(setting2)) ;
     e40:	8c ea       	ldi	r24, 0xAC	; 172
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	66 e0       	ldi	r22, 0x06	; 6
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	46 e0       	ldi	r20, 0x06	; 6
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	0f d8       	rcall	.-4066   	; 0xfffffe6c <__eeprom_end+0xff7efe5a>
		break;
     e4e:	08 95       	ret

		case 3:
			eeprom_update_block (( void *) &setting3 , ( const void *) &EEMEMsetting3 , sizeof(setting3)) ;
     e50:	83 eb       	ldi	r24, 0xB3	; 179
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	6c e0       	ldi	r22, 0x0C	; 12
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	46 e0       	ldi	r20, 0x06	; 6
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	07 d8       	rcall	.-4082   	; 0xfffffe6c <__eeprom_end+0xff7efe5a>
     e5e:	08 95       	ret

00000e60 <Relay_Init>:
#include "relay.h"

void Relay_Init()
{
	On(RELAY_DDR, RELAY1);
     e60:	ba 9a       	sbi	0x17, 2	; 23
	On(RELAY_DDR, RELAY2);
     e62:	b9 9a       	sbi	0x17, 1	; 23
	On(RELAY_DDR, RELAY3);
     e64:	b8 9a       	sbi	0x17, 0	; 23

	Off(RELAY_PORT, RELAY1);
     e66:	c2 98       	cbi	0x18, 2	; 24
	Off(RELAY_PORT, RELAY2);
     e68:	c1 98       	cbi	0x18, 1	; 24
	Off(RELAY_PORT, RELAY3);
     e6a:	c0 98       	cbi	0x18, 0	; 24
}
     e6c:	08 95       	ret

00000e6e <HandleRelay>:

void HandleRelay(Settings * setting, float temp, uint8_t relay)
{
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	7a 01       	movw	r14, r20
     e80:	8b 01       	movw	r16, r22
     e82:	d2 2e       	mov	r13, r18
	if (setting->direction)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	6c 81       	ldd	r22, Y+4	; 0x04
     e88:	88 23       	and	r24, r24
     e8a:	a9 f1       	breq	.+106    	; 0xef6 <HandleRelay+0x88>
	{
		if (temp<(setting->temp-setting->d))
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	88 27       	eor	r24, r24
     e90:	77 fd       	sbrc	r23, 7
     e92:	80 95       	com	r24
     e94:	98 2f       	mov	r25, r24
     e96:	4b d4       	rcall	.+2198   	; 0x172e <__floatsisf>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	68 81       	ld	r22, Y
     e9e:	79 81       	ldd	r23, Y+1	; 0x01
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	fa d1       	rcall	.+1012   	; 0x129a <__subsf3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	c8 01       	movw	r24, r16
     eac:	b7 01       	movw	r22, r14
     eae:	14 d4       	rcall	.+2088   	; 0x16d8 <__ltsf2>
     eb0:	87 ff       	sbrs	r24, 7
     eb2:	0c c0       	rjmp	.+24     	; 0xecc <HandleRelay+0x5e>
		{
			Off(RELAY_PORT, relay);
     eb4:	28 b3       	in	r18, 0x18	; 24
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0d 2c       	mov	r0, r13
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <HandleRelay+0x54>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <HandleRelay+0x50>
     ec6:	80 95       	com	r24
     ec8:	82 23       	and	r24, r18
     eca:	88 bb       	out	0x18, r24	; 24
		}
		if (temp>(setting->temp))
     ecc:	c8 01       	movw	r24, r16
     ece:	b7 01       	movw	r22, r14
     ed0:	28 81       	ld	r18, Y
     ed2:	39 81       	ldd	r19, Y+1	; 0x01
     ed4:	4a 81       	ldd	r20, Y+2	; 0x02
     ed6:	5b 81       	ldd	r21, Y+3	; 0x03
     ed8:	a9 d3       	rcall	.+1874   	; 0x162c <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <HandleRelay+0x72>
     ede:	3e c0       	rjmp	.+124    	; 0xf5c <HandleRelay+0xee>
		{
			On(RELAY_PORT, relay);
     ee0:	28 b3       	in	r18, 0x18	; 24
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <HandleRelay+0x7e>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	da 94       	dec	r13
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <HandleRelay+0x7a>
     ef0:	28 2b       	or	r18, r24
     ef2:	28 bb       	out	0x18, r18	; 24
     ef4:	33 c0       	rjmp	.+102    	; 0xf5c <HandleRelay+0xee>
		}
	}else
	{
		if (temp<(setting->temp-setting->d))
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	88 27       	eor	r24, r24
     efa:	77 fd       	sbrc	r23, 7
     efc:	80 95       	com	r24
     efe:	98 2f       	mov	r25, r24
     f00:	16 d4       	rcall	.+2092   	; 0x172e <__floatsisf>
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	68 81       	ld	r22, Y
     f08:	79 81       	ldd	r23, Y+1	; 0x01
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	c5 d1       	rcall	.+906    	; 0x129a <__subsf3>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	c8 01       	movw	r24, r16
     f16:	b7 01       	movw	r22, r14
     f18:	df d3       	rcall	.+1982   	; 0x16d8 <__ltsf2>
     f1a:	87 ff       	sbrs	r24, 7
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <HandleRelay+0xc6>
		{
			On(RELAY_PORT, relay);
     f1e:	28 b3       	in	r18, 0x18	; 24
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0d 2c       	mov	r0, r13
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <HandleRelay+0xbe>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <HandleRelay+0xba>
     f30:	28 2b       	or	r18, r24
     f32:	28 bb       	out	0x18, r18	; 24
		}
		if (temp>(setting->temp))
     f34:	c8 01       	movw	r24, r16
     f36:	b7 01       	movw	r22, r14
     f38:	28 81       	ld	r18, Y
     f3a:	39 81       	ldd	r19, Y+1	; 0x01
     f3c:	4a 81       	ldd	r20, Y+2	; 0x02
     f3e:	5b 81       	ldd	r21, Y+3	; 0x03
     f40:	75 d3       	rcall	.+1770   	; 0x162c <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	5c f4       	brge	.+22     	; 0xf5c <HandleRelay+0xee>
		{
			Off(RELAY_PORT, relay);
     f46:	28 b3       	in	r18, 0x18	; 24
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <HandleRelay+0xe4>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	da 94       	dec	r13
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <HandleRelay+0xe0>
     f56:	80 95       	com	r24
     f58:	82 23       	and	r24, r18
     f5a:	88 bb       	out	0x18, r24	; 24
		}
	}
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	08 95       	ret

00000f6c <__fixunssfsi>:
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	7b 01       	movw	r14, r22
     f76:	8c 01       	movw	r16, r24
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	5f e4       	ldi	r21, 0x4F	; 79
     f80:	80 d3       	rcall	.+1792   	; 0x1682 <__gesf2>
     f82:	87 fd       	sbrc	r24, 7
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <__fixunssfsi+0x38>
     f86:	c8 01       	movw	r24, r16
     f88:	b7 01       	movw	r22, r14
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	5f e4       	ldi	r21, 0x4F	; 79
     f92:	83 d1       	rcall	.+774    	; 0x129a <__subsf3>
     f94:	28 d4       	rcall	.+2128   	; 0x17e6 <__fixsfsi>
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
     f9a:	20 50       	subi	r18, 0x00	; 0
     f9c:	30 40       	sbci	r19, 0x00	; 0
     f9e:	40 40       	sbci	r20, 0x00	; 0
     fa0:	50 48       	sbci	r21, 0x80	; 128
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <__fixunssfsi+0x42>
     fa4:	c8 01       	movw	r24, r16
     fa6:	b7 01       	movw	r22, r14
     fa8:	1e d4       	rcall	.+2108   	; 0x17e6 <__fixsfsi>
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	b9 01       	movw	r22, r18
     fb0:	ca 01       	movw	r24, r20
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	08 95       	ret

00000fbc <_fpadd_parts>:
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e3 ee       	ldi	r30, 0xE3	; 227
     fc2:	f7 e0       	ldi	r31, 0x07	; 7
     fc4:	09 c7       	rjmp	.+3602   	; 0x1dd8 <__prologue_saves__+0x8>
     fc6:	fc 01       	movw	r30, r24
     fc8:	ea 01       	movw	r28, r20
     fca:	80 81       	ld	r24, Z
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <_fpadd_parts+0x16>
     fd0:	38 c1       	rjmp	.+624    	; 0x1242 <_fpadd_parts+0x286>
     fd2:	db 01       	movw	r26, r22
     fd4:	9c 91       	ld	r25, X
     fd6:	92 30       	cpi	r25, 0x02	; 2
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <_fpadd_parts+0x20>
     fda:	30 c1       	rjmp	.+608    	; 0x123c <_fpadd_parts+0x280>
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	59 f4       	brne	.+22     	; 0xff6 <_fpadd_parts+0x3a>
     fe0:	94 30       	cpi	r25, 0x04	; 4
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <_fpadd_parts+0x2a>
     fe4:	2e c1       	rjmp	.+604    	; 0x1242 <_fpadd_parts+0x286>
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	8c 91       	ld	r24, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	98 17       	cp	r25, r24
     ff0:	09 f0       	breq	.+2      	; 0xff4 <_fpadd_parts+0x38>
     ff2:	21 c1       	rjmp	.+578    	; 0x1236 <_fpadd_parts+0x27a>
     ff4:	26 c1       	rjmp	.+588    	; 0x1242 <_fpadd_parts+0x286>
     ff6:	94 30       	cpi	r25, 0x04	; 4
     ff8:	09 f4       	brne	.+2      	; 0xffc <_fpadd_parts+0x40>
     ffa:	20 c1       	rjmp	.+576    	; 0x123c <_fpadd_parts+0x280>
     ffc:	92 30       	cpi	r25, 0x02	; 2
     ffe:	b1 f4       	brne	.+44     	; 0x102c <_fpadd_parts+0x70>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	09 f0       	breq	.+2      	; 0x1006 <_fpadd_parts+0x4a>
    1004:	1e c1       	rjmp	.+572    	; 0x1242 <_fpadd_parts+0x286>
    1006:	ca 01       	movw	r24, r20
    1008:	af 01       	movw	r20, r30
    100a:	28 e0       	ldi	r18, 0x08	; 8
    100c:	da 01       	movw	r26, r20
    100e:	0d 90       	ld	r0, X+
    1010:	ad 01       	movw	r20, r26
    1012:	dc 01       	movw	r26, r24
    1014:	0d 92       	st	X+, r0
    1016:	cd 01       	movw	r24, r26
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	c1 f7       	brne	.-16     	; 0x100c <_fpadd_parts+0x50>
    101c:	db 01       	movw	r26, r22
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	8c 91       	ld	r24, X
    1022:	11 97       	sbiw	r26, 0x01	; 1
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	89 23       	and	r24, r25
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	0a c1       	rjmp	.+532    	; 0x1240 <_fpadd_parts+0x284>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	09 f4       	brne	.+2      	; 0x1032 <_fpadd_parts+0x76>
    1030:	05 c1       	rjmp	.+522    	; 0x123c <_fpadd_parts+0x280>
    1032:	c2 80       	ldd	r12, Z+2	; 0x02
    1034:	d3 80       	ldd	r13, Z+3	; 0x03
    1036:	db 01       	movw	r26, r22
    1038:	12 96       	adiw	r26, 0x02	; 2
    103a:	6d 90       	ld	r6, X+
    103c:	7c 90       	ld	r7, X
    103e:	13 97       	sbiw	r26, 0x03	; 3
    1040:	24 81       	ldd	r18, Z+4	; 0x04
    1042:	35 81       	ldd	r19, Z+5	; 0x05
    1044:	46 81       	ldd	r20, Z+6	; 0x06
    1046:	57 81       	ldd	r21, Z+7	; 0x07
    1048:	14 96       	adiw	r26, 0x04	; 4
    104a:	ed 90       	ld	r14, X+
    104c:	fd 90       	ld	r15, X+
    104e:	0d 91       	ld	r16, X+
    1050:	1c 91       	ld	r17, X
    1052:	17 97       	sbiw	r26, 0x07	; 7
    1054:	c6 01       	movw	r24, r12
    1056:	86 19       	sub	r24, r6
    1058:	97 09       	sbc	r25, r7
    105a:	5c 01       	movw	r10, r24
    105c:	97 ff       	sbrs	r25, 7
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <_fpadd_parts+0xac>
    1060:	aa 24       	eor	r10, r10
    1062:	bb 24       	eor	r11, r11
    1064:	a8 1a       	sub	r10, r24
    1066:	b9 0a       	sbc	r11, r25
    1068:	b0 e2       	ldi	r27, 0x20	; 32
    106a:	ab 16       	cp	r10, r27
    106c:	b1 04       	cpc	r11, r1
    106e:	0c f0       	brlt	.+2      	; 0x1072 <_fpadd_parts+0xb6>
    1070:	61 c0       	rjmp	.+194    	; 0x1134 <_fpadd_parts+0x178>
    1072:	18 16       	cp	r1, r24
    1074:	19 06       	cpc	r1, r25
    1076:	6c f5       	brge	.+90     	; 0x10d2 <_fpadd_parts+0x116>
    1078:	37 01       	movw	r6, r14
    107a:	48 01       	movw	r8, r16
    107c:	0a 2c       	mov	r0, r10
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <_fpadd_parts+0xcc>
    1080:	96 94       	lsr	r9
    1082:	87 94       	ror	r8
    1084:	77 94       	ror	r7
    1086:	67 94       	ror	r6
    1088:	0a 94       	dec	r0
    108a:	d2 f7       	brpl	.-12     	; 0x1080 <_fpadd_parts+0xc4>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	0a 2c       	mov	r0, r10
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <_fpadd_parts+0xe4>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	aa 1f       	adc	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	0a 94       	dec	r0
    10a2:	d2 f7       	brpl	.-12     	; 0x1098 <_fpadd_parts+0xdc>
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	a1 09       	sbc	r26, r1
    10a8:	b1 09       	sbc	r27, r1
    10aa:	8e 21       	and	r24, r14
    10ac:	9f 21       	and	r25, r15
    10ae:	a0 23       	and	r26, r16
    10b0:	b1 23       	and	r27, r17
    10b2:	ee 24       	eor	r14, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	87 01       	movw	r16, r14
    10b8:	e3 94       	inc	r14
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	a1 05       	cpc	r26, r1
    10be:	b1 05       	cpc	r27, r1
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <_fpadd_parts+0x10c>
    10c2:	ee 24       	eor	r14, r14
    10c4:	ff 24       	eor	r15, r15
    10c6:	87 01       	movw	r16, r14
    10c8:	e6 28       	or	r14, r6
    10ca:	f7 28       	or	r15, r7
    10cc:	08 29       	or	r16, r8
    10ce:	19 29       	or	r17, r9
    10d0:	3c c0       	rjmp	.+120    	; 0x114a <_fpadd_parts+0x18e>
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	d1 f1       	breq	.+116    	; 0x114a <_fpadd_parts+0x18e>
    10d6:	ca 0c       	add	r12, r10
    10d8:	db 1c       	adc	r13, r11
    10da:	39 01       	movw	r6, r18
    10dc:	4a 01       	movw	r8, r20
    10de:	0a 2c       	mov	r0, r10
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <_fpadd_parts+0x12e>
    10e2:	96 94       	lsr	r9
    10e4:	87 94       	ror	r8
    10e6:	77 94       	ror	r7
    10e8:	67 94       	ror	r6
    10ea:	0a 94       	dec	r0
    10ec:	d2 f7       	brpl	.-12     	; 0x10e2 <_fpadd_parts+0x126>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	0a 2c       	mov	r0, r10
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <_fpadd_parts+0x146>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	0a 94       	dec	r0
    1104:	d2 f7       	brpl	.-12     	; 0x10fa <_fpadd_parts+0x13e>
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	a1 09       	sbc	r26, r1
    110a:	b1 09       	sbc	r27, r1
    110c:	82 23       	and	r24, r18
    110e:	93 23       	and	r25, r19
    1110:	a4 23       	and	r26, r20
    1112:	b5 23       	and	r27, r21
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	a1 05       	cpc	r26, r1
    1120:	b1 05       	cpc	r27, r1
    1122:	19 f4       	brne	.+6      	; 0x112a <_fpadd_parts+0x16e>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	26 29       	or	r18, r6
    112c:	37 29       	or	r19, r7
    112e:	48 29       	or	r20, r8
    1130:	59 29       	or	r21, r9
    1132:	0b c0       	rjmp	.+22     	; 0x114a <_fpadd_parts+0x18e>
    1134:	6c 14       	cp	r6, r12
    1136:	7d 04       	cpc	r7, r13
    1138:	24 f4       	brge	.+8      	; 0x1142 <_fpadd_parts+0x186>
    113a:	ee 24       	eor	r14, r14
    113c:	ff 24       	eor	r15, r15
    113e:	87 01       	movw	r16, r14
    1140:	04 c0       	rjmp	.+8      	; 0x114a <_fpadd_parts+0x18e>
    1142:	63 01       	movw	r12, r6
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	fb 01       	movw	r30, r22
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	89 17       	cp	r24, r25
    1152:	09 f4       	brne	.+2      	; 0x1156 <_fpadd_parts+0x19a>
    1154:	45 c0       	rjmp	.+138    	; 0x11e0 <_fpadd_parts+0x224>
    1156:	88 23       	and	r24, r24
    1158:	49 f0       	breq	.+18     	; 0x116c <_fpadd_parts+0x1b0>
    115a:	d8 01       	movw	r26, r16
    115c:	c7 01       	movw	r24, r14
    115e:	82 1b       	sub	r24, r18
    1160:	93 0b       	sbc	r25, r19
    1162:	a4 0b       	sbc	r26, r20
    1164:	b5 0b       	sbc	r27, r21
    1166:	9c 01       	movw	r18, r24
    1168:	ad 01       	movw	r20, r26
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <_fpadd_parts+0x1b8>
    116c:	2e 19       	sub	r18, r14
    116e:	3f 09       	sbc	r19, r15
    1170:	40 0b       	sbc	r20, r16
    1172:	51 0b       	sbc	r21, r17
    1174:	57 fd       	sbrc	r21, 7
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <_fpadd_parts+0x1c4>
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	db 82       	std	Y+3, r13	; 0x03
    117c:	ca 82       	std	Y+2, r12	; 0x02
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <_fpadd_parts+0x1da>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	db 82       	std	Y+3, r13	; 0x03
    1186:	ca 82       	std	Y+2, r12	; 0x02
    1188:	50 95       	com	r21
    118a:	40 95       	com	r20
    118c:	30 95       	com	r19
    118e:	21 95       	neg	r18
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	4f 4f       	sbci	r20, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	2c 83       	std	Y+4, r18	; 0x04
    1198:	3d 83       	std	Y+5, r19	; 0x05
    119a:	4e 83       	std	Y+6, r20	; 0x06
    119c:	5f 83       	std	Y+7, r21	; 0x07
    119e:	0d c0       	rjmp	.+26     	; 0x11ba <_fpadd_parts+0x1fe>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	8c 83       	std	Y+4, r24	; 0x04
    11aa:	9d 83       	std	Y+5, r25	; 0x05
    11ac:	ae 83       	std	Y+6, r26	; 0x06
    11ae:	bf 83       	std	Y+7, r27	; 0x07
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9b 83       	std	Y+3, r25	; 0x03
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	ae 81       	ldd	r26, Y+6	; 0x06
    11c0:	bf 81       	ldd	r27, Y+7	; 0x07
    11c2:	9c 01       	movw	r18, r24
    11c4:	ad 01       	movw	r20, r26
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	30 40       	sbci	r19, 0x00	; 0
    11ca:	40 40       	sbci	r20, 0x00	; 0
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	2f 3f       	cpi	r18, 0xFF	; 255
    11d0:	ef ef       	ldi	r30, 0xFF	; 255
    11d2:	3e 07       	cpc	r19, r30
    11d4:	ef ef       	ldi	r30, 0xFF	; 255
    11d6:	4e 07       	cpc	r20, r30
    11d8:	ef e3       	ldi	r30, 0x3F	; 63
    11da:	5e 07       	cpc	r21, r30
    11dc:	08 f3       	brcs	.-62     	; 0x11a0 <_fpadd_parts+0x1e4>
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <_fpadd_parts+0x23a>
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	db 82       	std	Y+3, r13	; 0x03
    11e4:	ca 82       	std	Y+2, r12	; 0x02
    11e6:	2e 0d       	add	r18, r14
    11e8:	3f 1d       	adc	r19, r15
    11ea:	40 1f       	adc	r20, r16
    11ec:	51 1f       	adc	r21, r17
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	3d 83       	std	Y+5, r19	; 0x05
    11f2:	4e 83       	std	Y+6, r20	; 0x06
    11f4:	5f 83       	std	Y+7, r21	; 0x07
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	88 83       	st	Y, r24
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1200:	5f 81       	ldd	r21, Y+7	; 0x07
    1202:	57 ff       	sbrs	r21, 7
    1204:	1d c0       	rjmp	.+58     	; 0x1240 <_fpadd_parts+0x284>
    1206:	da 01       	movw	r26, r20
    1208:	c9 01       	movw	r24, r18
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	90 70       	andi	r25, 0x00	; 0
    120e:	a0 70       	andi	r26, 0x00	; 0
    1210:	b0 70       	andi	r27, 0x00	; 0
    1212:	56 95       	lsr	r21
    1214:	47 95       	ror	r20
    1216:	37 95       	ror	r19
    1218:	27 95       	ror	r18
    121a:	82 2b       	or	r24, r18
    121c:	93 2b       	or	r25, r19
    121e:	a4 2b       	or	r26, r20
    1220:	b5 2b       	or	r27, r21
    1222:	8c 83       	std	Y+4, r24	; 0x04
    1224:	9d 83       	std	Y+5, r25	; 0x05
    1226:	ae 83       	std	Y+6, r26	; 0x06
    1228:	bf 83       	std	Y+7, r27	; 0x07
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <_fpadd_parts+0x284>
    1236:	e7 e8       	ldi	r30, 0x87	; 135
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <_fpadd_parts+0x286>
    123c:	fb 01       	movw	r30, r22
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <_fpadd_parts+0x286>
    1240:	fe 01       	movw	r30, r28
    1242:	cf 01       	movw	r24, r30
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	ee e0       	ldi	r30, 0x0E	; 14
    124a:	e2 c5       	rjmp	.+3012   	; 0x1e10 <__epilogue_restores__+0x8>

0000124c <__addsf3>:
    124c:	a0 e2       	ldi	r26, 0x20	; 32
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	c9 c5       	rjmp	.+2962   	; 0x1de8 <__prologue_saves__+0x18>
    1256:	69 83       	std	Y+1, r22	; 0x01
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	2d 83       	std	Y+5, r18	; 0x05
    1260:	3e 83       	std	Y+6, r19	; 0x06
    1262:	4f 83       	std	Y+7, r20	; 0x07
    1264:	58 87       	std	Y+8, r21	; 0x08
    1266:	89 e0       	ldi	r24, 0x09	; 9
    1268:	e8 2e       	mov	r14, r24
    126a:	f1 2c       	mov	r15, r1
    126c:	ec 0e       	add	r14, r28
    126e:	fd 1e       	adc	r15, r29
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	b7 01       	movw	r22, r14
    1276:	a1 d4       	rcall	.+2370   	; 0x1bba <__unpack_f>
    1278:	8e 01       	movw	r16, r28
    127a:	0f 5e       	subi	r16, 0xEF	; 239
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	ce 01       	movw	r24, r28
    1280:	05 96       	adiw	r24, 0x05	; 5
    1282:	b8 01       	movw	r22, r16
    1284:	9a d4       	rcall	.+2356   	; 0x1bba <__unpack_f>
    1286:	c7 01       	movw	r24, r14
    1288:	b8 01       	movw	r22, r16
    128a:	ae 01       	movw	r20, r28
    128c:	47 5e       	subi	r20, 0xE7	; 231
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	95 de       	rcall	.-726    	; 0xfbc <_fpadd_parts>
    1292:	c6 d3       	rcall	.+1932   	; 0x1a20 <__pack_f>
    1294:	a0 96       	adiw	r28, 0x20	; 32
    1296:	e6 e0       	ldi	r30, 0x06	; 6
    1298:	c3 c5       	rjmp	.+2950   	; 0x1e20 <__epilogue_restores__+0x18>

0000129a <__subsf3>:
    129a:	a0 e2       	ldi	r26, 0x20	; 32
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e2 e5       	ldi	r30, 0x52	; 82
    12a0:	f9 e0       	ldi	r31, 0x09	; 9
    12a2:	a2 c5       	rjmp	.+2884   	; 0x1de8 <__prologue_saves__+0x18>
    12a4:	69 83       	std	Y+1, r22	; 0x01
    12a6:	7a 83       	std	Y+2, r23	; 0x02
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	2d 83       	std	Y+5, r18	; 0x05
    12ae:	3e 83       	std	Y+6, r19	; 0x06
    12b0:	4f 83       	std	Y+7, r20	; 0x07
    12b2:	58 87       	std	Y+8, r21	; 0x08
    12b4:	8e 01       	movw	r16, r28
    12b6:	07 5f       	subi	r16, 0xF7	; 247
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	b8 01       	movw	r22, r16
    12c0:	7c d4       	rcall	.+2296   	; 0x1bba <__unpack_f>
    12c2:	91 e1       	ldi	r25, 0x11	; 17
    12c4:	e9 2e       	mov	r14, r25
    12c6:	f1 2c       	mov	r15, r1
    12c8:	ec 0e       	add	r14, r28
    12ca:	fd 1e       	adc	r15, r29
    12cc:	ce 01       	movw	r24, r28
    12ce:	05 96       	adiw	r24, 0x05	; 5
    12d0:	b7 01       	movw	r22, r14
    12d2:	73 d4       	rcall	.+2278   	; 0x1bba <__unpack_f>
    12d4:	8a 89       	ldd	r24, Y+18	; 0x12
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	89 27       	eor	r24, r25
    12da:	8a 8b       	std	Y+18, r24	; 0x12
    12dc:	c8 01       	movw	r24, r16
    12de:	b7 01       	movw	r22, r14
    12e0:	ae 01       	movw	r20, r28
    12e2:	47 5e       	subi	r20, 0xE7	; 231
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	6a de       	rcall	.-812    	; 0xfbc <_fpadd_parts>
    12e8:	9b d3       	rcall	.+1846   	; 0x1a20 <__pack_f>
    12ea:	a0 96       	adiw	r28, 0x20	; 32
    12ec:	e6 e0       	ldi	r30, 0x06	; 6
    12ee:	98 c5       	rjmp	.+2864   	; 0x1e20 <__epilogue_restores__+0x18>

000012f0 <__mulsf3>:
    12f0:	a0 e2       	ldi	r26, 0x20	; 32
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ed e7       	ldi	r30, 0x7D	; 125
    12f6:	f9 e0       	ldi	r31, 0x09	; 9
    12f8:	6b c5       	rjmp	.+2774   	; 0x1dd0 <__prologue_saves__>
    12fa:	69 83       	std	Y+1, r22	; 0x01
    12fc:	7a 83       	std	Y+2, r23	; 0x02
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	2d 83       	std	Y+5, r18	; 0x05
    1304:	3e 83       	std	Y+6, r19	; 0x06
    1306:	4f 83       	std	Y+7, r20	; 0x07
    1308:	58 87       	std	Y+8, r21	; 0x08
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	be 01       	movw	r22, r28
    1310:	67 5f       	subi	r22, 0xF7	; 247
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	52 d4       	rcall	.+2212   	; 0x1bba <__unpack_f>
    1316:	ce 01       	movw	r24, r28
    1318:	05 96       	adiw	r24, 0x05	; 5
    131a:	be 01       	movw	r22, r28
    131c:	6f 5e       	subi	r22, 0xEF	; 239
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	4c d4       	rcall	.+2200   	; 0x1bba <__unpack_f>
    1322:	99 85       	ldd	r25, Y+9	; 0x09
    1324:	92 30       	cpi	r25, 0x02	; 2
    1326:	78 f0       	brcs	.+30     	; 0x1346 <__mulsf3+0x56>
    1328:	89 89       	ldd	r24, Y+17	; 0x11
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	c0 f0       	brcs	.+48     	; 0x135e <__mulsf3+0x6e>
    132e:	94 30       	cpi	r25, 0x04	; 4
    1330:	19 f4       	brne	.+6      	; 0x1338 <__mulsf3+0x48>
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	41 f4       	brne	.+16     	; 0x1346 <__mulsf3+0x56>
    1336:	cb c0       	rjmp	.+406    	; 0x14ce <__mulsf3+0x1de>
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	19 f4       	brne	.+6      	; 0x1342 <__mulsf3+0x52>
    133c:	92 30       	cpi	r25, 0x02	; 2
    133e:	79 f4       	brne	.+30     	; 0x135e <__mulsf3+0x6e>
    1340:	c6 c0       	rjmp	.+396    	; 0x14ce <__mulsf3+0x1de>
    1342:	92 30       	cpi	r25, 0x02	; 2
    1344:	51 f4       	brne	.+20     	; 0x135a <__mulsf3+0x6a>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	2a 85       	ldd	r18, Y+10	; 0x0a
    134a:	9a 89       	ldd	r25, Y+18	; 0x12
    134c:	29 17       	cp	r18, r25
    134e:	09 f4       	brne	.+2      	; 0x1352 <__mulsf3+0x62>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	8a 87       	std	Y+10, r24	; 0x0a
    1354:	ce 01       	movw	r24, r28
    1356:	09 96       	adiw	r24, 0x09	; 9
    1358:	bc c0       	rjmp	.+376    	; 0x14d2 <__mulsf3+0x1e2>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	51 f4       	brne	.+20     	; 0x1372 <__mulsf3+0x82>
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	2a 85       	ldd	r18, Y+10	; 0x0a
    1362:	9a 89       	ldd	r25, Y+18	; 0x12
    1364:	29 17       	cp	r18, r25
    1366:	09 f4       	brne	.+2      	; 0x136a <__mulsf3+0x7a>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	8a 8b       	std	Y+18, r24	; 0x12
    136c:	ce 01       	movw	r24, r28
    136e:	41 96       	adiw	r24, 0x11	; 17
    1370:	b0 c0       	rjmp	.+352    	; 0x14d2 <__mulsf3+0x1e2>
    1372:	6d 84       	ldd	r6, Y+13	; 0x0d
    1374:	7e 84       	ldd	r7, Y+14	; 0x0e
    1376:	8f 84       	ldd	r8, Y+15	; 0x0f
    1378:	98 88       	ldd	r9, Y+16	; 0x10
    137a:	ed 88       	ldd	r14, Y+21	; 0x15
    137c:	fe 88       	ldd	r15, Y+22	; 0x16
    137e:	0f 89       	ldd	r16, Y+23	; 0x17
    1380:	18 8d       	ldd	r17, Y+24	; 0x18
    1382:	e0 e2       	ldi	r30, 0x20	; 32
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	dc 01       	movw	r26, r24
    138c:	aa 24       	eor	r10, r10
    138e:	bb 24       	eor	r11, r11
    1390:	65 01       	movw	r12, r10
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	b3 01       	movw	r22, r6
    139a:	61 70       	andi	r22, 0x01	; 1
    139c:	70 70       	andi	r23, 0x00	; 0
    139e:	61 15       	cp	r22, r1
    13a0:	71 05       	cpc	r23, r1
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <__mulsf3+0xe8>
    13a4:	2e 0d       	add	r18, r14
    13a6:	3f 1d       	adc	r19, r15
    13a8:	40 1f       	adc	r20, r16
    13aa:	51 1f       	adc	r21, r17
    13ac:	15 01       	movw	r2, r10
    13ae:	26 01       	movw	r4, r12
    13b0:	28 0e       	add	r2, r24
    13b2:	39 1e       	adc	r3, r25
    13b4:	4a 1e       	adc	r4, r26
    13b6:	5b 1e       	adc	r5, r27
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	2e 15       	cp	r18, r14
    13c2:	3f 05       	cpc	r19, r15
    13c4:	40 07       	cpc	r20, r16
    13c6:	51 07       	cpc	r21, r17
    13c8:	18 f0       	brcs	.+6      	; 0x13d0 <__mulsf3+0xe0>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	dc 01       	movw	r26, r24
    13d0:	82 0d       	add	r24, r2
    13d2:	93 1d       	adc	r25, r3
    13d4:	a4 1d       	adc	r26, r4
    13d6:	b5 1d       	adc	r27, r5
    13d8:	aa 0c       	add	r10, r10
    13da:	bb 1c       	adc	r11, r11
    13dc:	cc 1c       	adc	r12, r12
    13de:	dd 1c       	adc	r13, r13
    13e0:	17 ff       	sbrs	r17, 7
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <__mulsf3+0x106>
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	26 2e       	mov	r2, r22
    13e8:	31 2c       	mov	r3, r1
    13ea:	41 2c       	mov	r4, r1
    13ec:	51 2c       	mov	r5, r1
    13ee:	a2 28       	or	r10, r2
    13f0:	b3 28       	or	r11, r3
    13f2:	c4 28       	or	r12, r4
    13f4:	d5 28       	or	r13, r5
    13f6:	31 97       	sbiw	r30, 0x01	; 1
    13f8:	49 f0       	breq	.+18     	; 0x140c <__mulsf3+0x11c>
    13fa:	ee 0c       	add	r14, r14
    13fc:	ff 1c       	adc	r15, r15
    13fe:	00 1f       	adc	r16, r16
    1400:	11 1f       	adc	r17, r17
    1402:	96 94       	lsr	r9
    1404:	87 94       	ror	r8
    1406:	77 94       	ror	r7
    1408:	67 94       	ror	r6
    140a:	c6 cf       	rjmp	.-116    	; 0x1398 <__mulsf3+0xa8>
    140c:	6b 89       	ldd	r22, Y+19	; 0x13
    140e:	7c 89       	ldd	r23, Y+20	; 0x14
    1410:	eb 85       	ldd	r30, Y+11	; 0x0b
    1412:	fc 85       	ldd	r31, Y+12	; 0x0c
    1414:	6e 0f       	add	r22, r30
    1416:	7f 1f       	adc	r23, r31
    1418:	6e 5f       	subi	r22, 0xFE	; 254
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	7c 8f       	std	Y+28, r23	; 0x1c
    141e:	6b 8f       	std	Y+27, r22	; 0x1b
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	ea 85       	ldd	r30, Y+10	; 0x0a
    1424:	7a 89       	ldd	r23, Y+18	; 0x12
    1426:	e7 17       	cp	r30, r23
    1428:	09 f4       	brne	.+2      	; 0x142c <__mulsf3+0x13c>
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	6a 8f       	std	Y+26, r22	; 0x1a
    142e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1430:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1432:	10 c0       	rjmp	.+32     	; 0x1454 <__mulsf3+0x164>
    1434:	fc 01       	movw	r30, r24
    1436:	e1 70       	andi	r30, 0x01	; 1
    1438:	f0 70       	andi	r31, 0x00	; 0
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	29 f0       	breq	.+10     	; 0x1448 <__mulsf3+0x158>
    143e:	56 95       	lsr	r21
    1440:	47 95       	ror	r20
    1442:	37 95       	ror	r19
    1444:	27 95       	ror	r18
    1446:	50 68       	ori	r21, 0x80	; 128
    1448:	b6 95       	lsr	r27
    144a:	a7 95       	ror	r26
    144c:	97 95       	ror	r25
    144e:	87 95       	ror	r24
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	b7 fd       	sbrc	r27, 7
    1456:	ee cf       	rjmp	.-36     	; 0x1434 <__mulsf3+0x144>
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <__mulsf3+0x182>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	57 fd       	sbrc	r21, 7
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	44 1f       	adc	r20, r20
    146c:	55 1f       	adc	r21, r21
    146e:	61 50       	subi	r22, 0x01	; 1
    1470:	70 40       	sbci	r23, 0x00	; 0
    1472:	80 30       	cpi	r24, 0x00	; 0
    1474:	e0 e0       	ldi	r30, 0x00	; 0
    1476:	9e 07       	cpc	r25, r30
    1478:	e0 e0       	ldi	r30, 0x00	; 0
    147a:	ae 07       	cpc	r26, r30
    147c:	e0 e4       	ldi	r30, 0x40	; 64
    147e:	be 07       	cpc	r27, r30
    1480:	60 f3       	brcs	.-40     	; 0x145a <__mulsf3+0x16a>
    1482:	6b 8f       	std	Y+27, r22	; 0x1b
    1484:	7c 8f       	std	Y+28, r23	; 0x1c
    1486:	6f e7       	ldi	r22, 0x7F	; 127
    1488:	e6 2e       	mov	r14, r22
    148a:	f1 2c       	mov	r15, r1
    148c:	01 2d       	mov	r16, r1
    148e:	11 2d       	mov	r17, r1
    1490:	e8 22       	and	r14, r24
    1492:	f9 22       	and	r15, r25
    1494:	0a 23       	and	r16, r26
    1496:	1b 23       	and	r17, r27
    1498:	60 e4       	ldi	r22, 0x40	; 64
    149a:	e6 16       	cp	r14, r22
    149c:	f1 04       	cpc	r15, r1
    149e:	01 05       	cpc	r16, r1
    14a0:	11 05       	cpc	r17, r1
    14a2:	61 f4       	brne	.+24     	; 0x14bc <__mulsf3+0x1cc>
    14a4:	87 fd       	sbrc	r24, 7
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <__mulsf3+0x1cc>
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	41 05       	cpc	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	29 f0       	breq	.+10     	; 0x14bc <__mulsf3+0x1cc>
    14b2:	80 5c       	subi	r24, 0xC0	; 192
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	af 4f       	sbci	r26, 0xFF	; 255
    14b8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ba:	80 78       	andi	r24, 0x80	; 128
    14bc:	8d 8f       	std	Y+29, r24	; 0x1d
    14be:	9e 8f       	std	Y+30, r25	; 0x1e
    14c0:	af 8f       	std	Y+31, r26	; 0x1f
    14c2:	b8 a3       	std	Y+32, r27	; 0x20
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	89 8f       	std	Y+25, r24	; 0x19
    14c8:	ce 01       	movw	r24, r28
    14ca:	49 96       	adiw	r24, 0x19	; 25
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <__mulsf3+0x1e2>
    14ce:	87 e8       	ldi	r24, 0x87	; 135
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a6 d2       	rcall	.+1356   	; 0x1a20 <__pack_f>
    14d4:	a0 96       	adiw	r28, 0x20	; 32
    14d6:	e2 e1       	ldi	r30, 0x12	; 18
    14d8:	97 c4       	rjmp	.+2350   	; 0x1e08 <__epilogue_restores__>

000014da <__divsf3>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e2 e7       	ldi	r30, 0x72	; 114
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	7e c4       	rjmp	.+2300   	; 0x1de0 <__prologue_saves__+0x10>
    14e4:	69 83       	std	Y+1, r22	; 0x01
    14e6:	7a 83       	std	Y+2, r23	; 0x02
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	2d 83       	std	Y+5, r18	; 0x05
    14ee:	3e 83       	std	Y+6, r19	; 0x06
    14f0:	4f 83       	std	Y+7, r20	; 0x07
    14f2:	58 87       	std	Y+8, r21	; 0x08
    14f4:	8e 01       	movw	r16, r28
    14f6:	07 5f       	subi	r16, 0xF7	; 247
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	b8 01       	movw	r22, r16
    1500:	5c d3       	rcall	.+1720   	; 0x1bba <__unpack_f>
    1502:	81 e1       	ldi	r24, 0x11	; 17
    1504:	e8 2e       	mov	r14, r24
    1506:	f1 2c       	mov	r15, r1
    1508:	ec 0e       	add	r14, r28
    150a:	fd 1e       	adc	r15, r29
    150c:	ce 01       	movw	r24, r28
    150e:	05 96       	adiw	r24, 0x05	; 5
    1510:	b7 01       	movw	r22, r14
    1512:	53 d3       	rcall	.+1702   	; 0x1bba <__unpack_f>
    1514:	99 85       	ldd	r25, Y+9	; 0x09
    1516:	92 30       	cpi	r25, 0x02	; 2
    1518:	08 f4       	brcc	.+2      	; 0x151c <__divsf3+0x42>
    151a:	83 c0       	rjmp	.+262    	; 0x1622 <__divsf3+0x148>
    151c:	89 89       	ldd	r24, Y+17	; 0x11
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	08 f4       	brcc	.+2      	; 0x1524 <__divsf3+0x4a>
    1522:	7b c0       	rjmp	.+246    	; 0x161a <__divsf3+0x140>
    1524:	2a 85       	ldd	r18, Y+10	; 0x0a
    1526:	3a 89       	ldd	r19, Y+18	; 0x12
    1528:	23 27       	eor	r18, r19
    152a:	2a 87       	std	Y+10, r18	; 0x0a
    152c:	94 30       	cpi	r25, 0x04	; 4
    152e:	11 f0       	breq	.+4      	; 0x1534 <__divsf3+0x5a>
    1530:	92 30       	cpi	r25, 0x02	; 2
    1532:	21 f4       	brne	.+8      	; 0x153c <__divsf3+0x62>
    1534:	98 17       	cp	r25, r24
    1536:	09 f0       	breq	.+2      	; 0x153a <__divsf3+0x60>
    1538:	6c c0       	rjmp	.+216    	; 0x1612 <__divsf3+0x138>
    153a:	71 c0       	rjmp	.+226    	; 0x161e <__divsf3+0x144>
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	39 f4       	brne	.+14     	; 0x154e <__divsf3+0x74>
    1540:	1d 86       	std	Y+13, r1	; 0x0d
    1542:	1e 86       	std	Y+14, r1	; 0x0e
    1544:	1f 86       	std	Y+15, r1	; 0x0f
    1546:	18 8a       	std	Y+16, r1	; 0x10
    1548:	1c 86       	std	Y+12, r1	; 0x0c
    154a:	1b 86       	std	Y+11, r1	; 0x0b
    154c:	6a c0       	rjmp	.+212    	; 0x1622 <__divsf3+0x148>
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	19 f4       	brne	.+6      	; 0x1558 <__divsf3+0x7e>
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	89 87       	std	Y+9, r24	; 0x09
    1556:	65 c0       	rjmp	.+202    	; 0x1622 <__divsf3+0x148>
    1558:	8b 85       	ldd	r24, Y+11	; 0x0b
    155a:	9c 85       	ldd	r25, Y+12	; 0x0c
    155c:	2b 89       	ldd	r18, Y+19	; 0x13
    155e:	3c 89       	ldd	r19, Y+20	; 0x14
    1560:	82 1b       	sub	r24, r18
    1562:	93 0b       	sbc	r25, r19
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	2d 85       	ldd	r18, Y+13	; 0x0d
    156a:	3e 85       	ldd	r19, Y+14	; 0x0e
    156c:	4f 85       	ldd	r20, Y+15	; 0x0f
    156e:	58 89       	ldd	r21, Y+16	; 0x10
    1570:	ed 88       	ldd	r14, Y+21	; 0x15
    1572:	fe 88       	ldd	r15, Y+22	; 0x16
    1574:	0f 89       	ldd	r16, Y+23	; 0x17
    1576:	18 8d       	ldd	r17, Y+24	; 0x18
    1578:	2e 15       	cp	r18, r14
    157a:	3f 05       	cpc	r19, r15
    157c:	40 07       	cpc	r20, r16
    157e:	51 07       	cpc	r21, r17
    1580:	38 f4       	brcc	.+14     	; 0x1590 <__divsf3+0xb6>
    1582:	22 0f       	add	r18, r18
    1584:	33 1f       	adc	r19, r19
    1586:	44 1f       	adc	r20, r20
    1588:	55 1f       	adc	r21, r21
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	9c 87       	std	Y+12, r25	; 0x0c
    158e:	8b 87       	std	Y+11, r24	; 0x0b
    1590:	6f e1       	ldi	r22, 0x1F	; 31
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	a1 2c       	mov	r10, r1
    1596:	b1 2c       	mov	r11, r1
    1598:	c1 2c       	mov	r12, r1
    159a:	a0 e4       	ldi	r26, 0x40	; 64
    159c:	da 2e       	mov	r13, r26
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	dc 01       	movw	r26, r24
    15a4:	2e 15       	cp	r18, r14
    15a6:	3f 05       	cpc	r19, r15
    15a8:	40 07       	cpc	r20, r16
    15aa:	51 07       	cpc	r21, r17
    15ac:	40 f0       	brcs	.+16     	; 0x15be <__divsf3+0xe4>
    15ae:	8a 29       	or	r24, r10
    15b0:	9b 29       	or	r25, r11
    15b2:	ac 29       	or	r26, r12
    15b4:	bd 29       	or	r27, r13
    15b6:	2e 19       	sub	r18, r14
    15b8:	3f 09       	sbc	r19, r15
    15ba:	40 0b       	sbc	r20, r16
    15bc:	51 0b       	sbc	r21, r17
    15be:	d6 94       	lsr	r13
    15c0:	c7 94       	ror	r12
    15c2:	b7 94       	ror	r11
    15c4:	a7 94       	ror	r10
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	44 1f       	adc	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	61 50       	subi	r22, 0x01	; 1
    15d0:	70 40       	sbci	r23, 0x00	; 0
    15d2:	41 f7       	brne	.-48     	; 0x15a4 <__divsf3+0xca>
    15d4:	6f e7       	ldi	r22, 0x7F	; 127
    15d6:	e6 2e       	mov	r14, r22
    15d8:	f1 2c       	mov	r15, r1
    15da:	01 2d       	mov	r16, r1
    15dc:	11 2d       	mov	r17, r1
    15de:	e8 22       	and	r14, r24
    15e0:	f9 22       	and	r15, r25
    15e2:	0a 23       	and	r16, r26
    15e4:	1b 23       	and	r17, r27
    15e6:	60 e4       	ldi	r22, 0x40	; 64
    15e8:	e6 16       	cp	r14, r22
    15ea:	f1 04       	cpc	r15, r1
    15ec:	01 05       	cpc	r16, r1
    15ee:	11 05       	cpc	r17, r1
    15f0:	61 f4       	brne	.+24     	; 0x160a <__divsf3+0x130>
    15f2:	87 fd       	sbrc	r24, 7
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <__divsf3+0x130>
    15f6:	21 15       	cp	r18, r1
    15f8:	31 05       	cpc	r19, r1
    15fa:	41 05       	cpc	r20, r1
    15fc:	51 05       	cpc	r21, r1
    15fe:	29 f0       	breq	.+10     	; 0x160a <__divsf3+0x130>
    1600:	80 5c       	subi	r24, 0xC0	; 192
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	af 4f       	sbci	r26, 0xFF	; 255
    1606:	bf 4f       	sbci	r27, 0xFF	; 255
    1608:	80 78       	andi	r24, 0x80	; 128
    160a:	8d 87       	std	Y+13, r24	; 0x0d
    160c:	9e 87       	std	Y+14, r25	; 0x0e
    160e:	af 87       	std	Y+15, r26	; 0x0f
    1610:	b8 8b       	std	Y+16, r27	; 0x10
    1612:	8e 01       	movw	r16, r28
    1614:	07 5f       	subi	r16, 0xF7	; 247
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__divsf3+0x148>
    161a:	87 01       	movw	r16, r14
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <__divsf3+0x148>
    161e:	07 e8       	ldi	r16, 0x87	; 135
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	c8 01       	movw	r24, r16
    1624:	fd d1       	rcall	.+1018   	; 0x1a20 <__pack_f>
    1626:	68 96       	adiw	r28, 0x18	; 24
    1628:	ea e0       	ldi	r30, 0x0A	; 10
    162a:	f6 c3       	rjmp	.+2028   	; 0x1e18 <__epilogue_restores__+0x10>

0000162c <__gtsf2>:
    162c:	a8 e1       	ldi	r26, 0x18	; 24
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e1       	ldi	r30, 0x1B	; 27
    1632:	fb e0       	ldi	r31, 0x0B	; 11
    1634:	d9 c3       	rjmp	.+1970   	; 0x1de8 <__prologue_saves__+0x18>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	3e 83       	std	Y+6, r19	; 0x06
    1642:	4f 83       	std	Y+7, r20	; 0x07
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	8e 01       	movw	r16, r28
    1648:	07 5f       	subi	r16, 0xF7	; 247
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	b8 01       	movw	r22, r16
    1652:	b3 d2       	rcall	.+1382   	; 0x1bba <__unpack_f>
    1654:	81 e1       	ldi	r24, 0x11	; 17
    1656:	e8 2e       	mov	r14, r24
    1658:	f1 2c       	mov	r15, r1
    165a:	ec 0e       	add	r14, r28
    165c:	fd 1e       	adc	r15, r29
    165e:	ce 01       	movw	r24, r28
    1660:	05 96       	adiw	r24, 0x05	; 5
    1662:	b7 01       	movw	r22, r14
    1664:	aa d2       	rcall	.+1364   	; 0x1bba <__unpack_f>
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	38 f0       	brcs	.+14     	; 0x167a <__gtsf2+0x4e>
    166c:	89 89       	ldd	r24, Y+17	; 0x11
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	20 f0       	brcs	.+8      	; 0x167a <__gtsf2+0x4e>
    1672:	c8 01       	movw	r24, r16
    1674:	b7 01       	movw	r22, r14
    1676:	0a d3       	rcall	.+1556   	; 0x1c8c <__fpcmp_parts_f>
    1678:	01 c0       	rjmp	.+2      	; 0x167c <__gtsf2+0x50>
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	68 96       	adiw	r28, 0x18	; 24
    167e:	e6 e0       	ldi	r30, 0x06	; 6
    1680:	cf c3       	rjmp	.+1950   	; 0x1e20 <__epilogue_restores__+0x18>

00001682 <__gesf2>:
    1682:	a8 e1       	ldi	r26, 0x18	; 24
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e6 e4       	ldi	r30, 0x46	; 70
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	ae c3       	rjmp	.+1884   	; 0x1de8 <__prologue_saves__+0x18>
    168c:	69 83       	std	Y+1, r22	; 0x01
    168e:	7a 83       	std	Y+2, r23	; 0x02
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	2d 83       	std	Y+5, r18	; 0x05
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	4f 83       	std	Y+7, r20	; 0x07
    169a:	58 87       	std	Y+8, r21	; 0x08
    169c:	8e 01       	movw	r16, r28
    169e:	07 5f       	subi	r16, 0xF7	; 247
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	b8 01       	movw	r22, r16
    16a8:	88 d2       	rcall	.+1296   	; 0x1bba <__unpack_f>
    16aa:	81 e1       	ldi	r24, 0x11	; 17
    16ac:	e8 2e       	mov	r14, r24
    16ae:	f1 2c       	mov	r15, r1
    16b0:	ec 0e       	add	r14, r28
    16b2:	fd 1e       	adc	r15, r29
    16b4:	ce 01       	movw	r24, r28
    16b6:	05 96       	adiw	r24, 0x05	; 5
    16b8:	b7 01       	movw	r22, r14
    16ba:	7f d2       	rcall	.+1278   	; 0x1bba <__unpack_f>
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <__gesf2+0x4e>
    16c2:	89 89       	ldd	r24, Y+17	; 0x11
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	20 f0       	brcs	.+8      	; 0x16d0 <__gesf2+0x4e>
    16c8:	c8 01       	movw	r24, r16
    16ca:	b7 01       	movw	r22, r14
    16cc:	df d2       	rcall	.+1470   	; 0x1c8c <__fpcmp_parts_f>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <__gesf2+0x50>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	68 96       	adiw	r28, 0x18	; 24
    16d4:	e6 e0       	ldi	r30, 0x06	; 6
    16d6:	a4 c3       	rjmp	.+1864   	; 0x1e20 <__epilogue_restores__+0x18>

000016d8 <__ltsf2>:
    16d8:	a8 e1       	ldi	r26, 0x18	; 24
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e7       	ldi	r30, 0x71	; 113
    16de:	fb e0       	ldi	r31, 0x0B	; 11
    16e0:	83 c3       	rjmp	.+1798   	; 0x1de8 <__prologue_saves__+0x18>
    16e2:	69 83       	std	Y+1, r22	; 0x01
    16e4:	7a 83       	std	Y+2, r23	; 0x02
    16e6:	8b 83       	std	Y+3, r24	; 0x03
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	2d 83       	std	Y+5, r18	; 0x05
    16ec:	3e 83       	std	Y+6, r19	; 0x06
    16ee:	4f 83       	std	Y+7, r20	; 0x07
    16f0:	58 87       	std	Y+8, r21	; 0x08
    16f2:	8e 01       	movw	r16, r28
    16f4:	07 5f       	subi	r16, 0xF7	; 247
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	ce 01       	movw	r24, r28
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	b8 01       	movw	r22, r16
    16fe:	5d d2       	rcall	.+1210   	; 0x1bba <__unpack_f>
    1700:	81 e1       	ldi	r24, 0x11	; 17
    1702:	e8 2e       	mov	r14, r24
    1704:	f1 2c       	mov	r15, r1
    1706:	ec 0e       	add	r14, r28
    1708:	fd 1e       	adc	r15, r29
    170a:	ce 01       	movw	r24, r28
    170c:	05 96       	adiw	r24, 0x05	; 5
    170e:	b7 01       	movw	r22, r14
    1710:	54 d2       	rcall	.+1192   	; 0x1bba <__unpack_f>
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	38 f0       	brcs	.+14     	; 0x1726 <__ltsf2+0x4e>
    1718:	89 89       	ldd	r24, Y+17	; 0x11
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	20 f0       	brcs	.+8      	; 0x1726 <__ltsf2+0x4e>
    171e:	c8 01       	movw	r24, r16
    1720:	b7 01       	movw	r22, r14
    1722:	b4 d2       	rcall	.+1384   	; 0x1c8c <__fpcmp_parts_f>
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <__ltsf2+0x50>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	68 96       	adiw	r28, 0x18	; 24
    172a:	e6 e0       	ldi	r30, 0x06	; 6
    172c:	79 c3       	rjmp	.+1778   	; 0x1e20 <__epilogue_restores__+0x18>

0000172e <__floatsisf>:
    172e:	a8 e0       	ldi	r26, 0x08	; 8
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ec e9       	ldi	r30, 0x9C	; 156
    1734:	fb e0       	ldi	r31, 0x0B	; 11
    1736:	58 c3       	rjmp	.+1712   	; 0x1de8 <__prologue_saves__+0x18>
    1738:	7b 01       	movw	r14, r22
    173a:	8c 01       	movw	r16, r24
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	d8 01       	movw	r26, r16
    1742:	c7 01       	movw	r24, r14
    1744:	88 27       	eor	r24, r24
    1746:	b7 fd       	sbrc	r27, 7
    1748:	83 95       	inc	r24
    174a:	99 27       	eor	r25, r25
    174c:	aa 27       	eor	r26, r26
    174e:	bb 27       	eor	r27, r27
    1750:	28 2f       	mov	r18, r24
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	e1 14       	cp	r14, r1
    1756:	f1 04       	cpc	r15, r1
    1758:	01 05       	cpc	r16, r1
    175a:	11 05       	cpc	r17, r1
    175c:	19 f4       	brne	.+6      	; 0x1764 <__floatsisf+0x36>
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	36 c0       	rjmp	.+108    	; 0x17d0 <__floatsisf+0xa2>
    1764:	8e e1       	ldi	r24, 0x1E	; 30
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	22 23       	and	r18, r18
    176e:	89 f0       	breq	.+34     	; 0x1792 <__floatsisf+0x64>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	e8 16       	cp	r14, r24
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	f8 06       	cpc	r15, r24
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 07       	cpc	r16, r24
    177c:	80 e8       	ldi	r24, 0x80	; 128
    177e:	18 07       	cpc	r17, r24
    1780:	59 f1       	breq	.+86     	; 0x17d8 <__floatsisf+0xaa>
    1782:	10 95       	com	r17
    1784:	00 95       	com	r16
    1786:	f0 94       	com	r15
    1788:	e0 94       	com	r14
    178a:	e1 1c       	adc	r14, r1
    178c:	f1 1c       	adc	r15, r1
    178e:	01 1d       	adc	r16, r1
    1790:	11 1d       	adc	r17, r1
    1792:	ed 82       	std	Y+5, r14	; 0x05
    1794:	fe 82       	std	Y+6, r15	; 0x06
    1796:	0f 83       	std	Y+7, r16	; 0x07
    1798:	18 87       	std	Y+8, r17	; 0x08
    179a:	c8 01       	movw	r24, r16
    179c:	b7 01       	movw	r22, r14
    179e:	e6 d0       	rcall	.+460    	; 0x196c <__clzsi2>
    17a0:	9c 01       	movw	r18, r24
    17a2:	21 50       	subi	r18, 0x01	; 1
    17a4:	30 40       	sbci	r19, 0x00	; 0
    17a6:	12 16       	cp	r1, r18
    17a8:	13 06       	cpc	r1, r19
    17aa:	94 f4       	brge	.+36     	; 0x17d0 <__floatsisf+0xa2>
    17ac:	02 2e       	mov	r0, r18
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <__floatsisf+0x8a>
    17b0:	ee 0c       	add	r14, r14
    17b2:	ff 1c       	adc	r15, r15
    17b4:	00 1f       	adc	r16, r16
    17b6:	11 1f       	adc	r17, r17
    17b8:	0a 94       	dec	r0
    17ba:	d2 f7       	brpl	.-12     	; 0x17b0 <__floatsisf+0x82>
    17bc:	ed 82       	std	Y+5, r14	; 0x05
    17be:	fe 82       	std	Y+6, r15	; 0x06
    17c0:	0f 83       	std	Y+7, r16	; 0x07
    17c2:	18 87       	std	Y+8, r17	; 0x08
    17c4:	8e e1       	ldi	r24, 0x1E	; 30
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	82 1b       	sub	r24, r18
    17ca:	93 0b       	sbc	r25, r19
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	25 d1       	rcall	.+586    	; 0x1a20 <__pack_f>
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <__floatsisf+0xb2>
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	9f ec       	ldi	r25, 0xCF	; 207
    17e0:	28 96       	adiw	r28, 0x08	; 8
    17e2:	e6 e0       	ldi	r30, 0x06	; 6
    17e4:	1d c3       	rjmp	.+1594   	; 0x1e20 <__epilogue_restores__+0x18>

000017e6 <__fixsfsi>:
    17e6:	ac e0       	ldi	r26, 0x0C	; 12
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 ef       	ldi	r30, 0xF8	; 248
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	00 c3       	rjmp	.+1536   	; 0x1df0 <__prologue_saves__+0x20>
    17f0:	69 83       	std	Y+1, r22	; 0x01
    17f2:	7a 83       	std	Y+2, r23	; 0x02
    17f4:	8b 83       	std	Y+3, r24	; 0x03
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	ce 01       	movw	r24, r28
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	be 01       	movw	r22, r28
    17fe:	6b 5f       	subi	r22, 0xFB	; 251
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	db d1       	rcall	.+950    	; 0x1bba <__unpack_f>
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	81 f1       	breq	.+96     	; 0x186a <__fixsfsi+0x84>
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	70 f1       	brcs	.+92     	; 0x186a <__fixsfsi+0x84>
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	21 f4       	brne	.+8      	; 0x181a <__fixsfsi+0x34>
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	88 23       	and	r24, r24
    1816:	69 f1       	breq	.+90     	; 0x1872 <__fixsfsi+0x8c>
    1818:	0a c0       	rjmp	.+20     	; 0x182e <__fixsfsi+0x48>
    181a:	2f 81       	ldd	r18, Y+7	; 0x07
    181c:	38 85       	ldd	r19, Y+8	; 0x08
    181e:	37 fd       	sbrc	r19, 7
    1820:	24 c0       	rjmp	.+72     	; 0x186a <__fixsfsi+0x84>
    1822:	6e 81       	ldd	r22, Y+6	; 0x06
    1824:	2f 31       	cpi	r18, 0x1F	; 31
    1826:	31 05       	cpc	r19, r1
    1828:	3c f0       	brlt	.+14     	; 0x1838 <__fixsfsi+0x52>
    182a:	66 23       	and	r22, r22
    182c:	11 f1       	breq	.+68     	; 0x1872 <__fixsfsi+0x8c>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	50 e8       	ldi	r21, 0x80	; 128
    1836:	21 c0       	rjmp	.+66     	; 0x187a <__fixsfsi+0x94>
    1838:	8e e1       	ldi	r24, 0x1E	; 30
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	29 85       	ldd	r18, Y+9	; 0x09
    1842:	3a 85       	ldd	r19, Y+10	; 0x0a
    1844:	4b 85       	ldd	r20, Y+11	; 0x0b
    1846:	5c 85       	ldd	r21, Y+12	; 0x0c
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__fixsfsi+0x6c>
    184a:	56 95       	lsr	r21
    184c:	47 95       	ror	r20
    184e:	37 95       	ror	r19
    1850:	27 95       	ror	r18
    1852:	8a 95       	dec	r24
    1854:	d2 f7       	brpl	.-12     	; 0x184a <__fixsfsi+0x64>
    1856:	66 23       	and	r22, r22
    1858:	81 f0       	breq	.+32     	; 0x187a <__fixsfsi+0x94>
    185a:	50 95       	com	r21
    185c:	40 95       	com	r20
    185e:	30 95       	com	r19
    1860:	21 95       	neg	r18
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	4f 4f       	sbci	r20, 0xFF	; 255
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
    1868:	08 c0       	rjmp	.+16     	; 0x187a <__fixsfsi+0x94>
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	a9 01       	movw	r20, r18
    1870:	04 c0       	rjmp	.+8      	; 0x187a <__fixsfsi+0x94>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f ef       	ldi	r20, 0xFF	; 255
    1878:	5f e7       	ldi	r21, 0x7F	; 127
    187a:	b9 01       	movw	r22, r18
    187c:	ca 01       	movw	r24, r20
    187e:	2c 96       	adiw	r28, 0x0c	; 12
    1880:	e2 e0       	ldi	r30, 0x02	; 2
    1882:	d2 c2       	rjmp	.+1444   	; 0x1e28 <__epilogue_restores__+0x20>

00001884 <__floatunsisf>:
    1884:	a8 e0       	ldi	r26, 0x08	; 8
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e4       	ldi	r30, 0x47	; 71
    188a:	fc e0       	ldi	r31, 0x0C	; 12
    188c:	ab c2       	rjmp	.+1366   	; 0x1de4 <__prologue_saves__+0x14>
    188e:	7b 01       	movw	r14, r22
    1890:	8c 01       	movw	r16, r24
    1892:	1a 82       	std	Y+2, r1	; 0x02
    1894:	61 15       	cp	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	81 05       	cpc	r24, r1
    189a:	91 05       	cpc	r25, r1
    189c:	19 f4       	brne	.+6      	; 0x18a4 <__floatunsisf+0x20>
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	5e c0       	rjmp	.+188    	; 0x1960 <__floatunsisf+0xdc>
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	8e e1       	ldi	r24, 0x1E	; 30
    18aa:	c8 2e       	mov	r12, r24
    18ac:	d1 2c       	mov	r13, r1
    18ae:	dc 82       	std	Y+4, r13	; 0x04
    18b0:	cb 82       	std	Y+3, r12	; 0x03
    18b2:	ed 82       	std	Y+5, r14	; 0x05
    18b4:	fe 82       	std	Y+6, r15	; 0x06
    18b6:	0f 83       	std	Y+7, r16	; 0x07
    18b8:	18 87       	std	Y+8, r17	; 0x08
    18ba:	c8 01       	movw	r24, r16
    18bc:	b7 01       	movw	r22, r14
    18be:	56 d0       	rcall	.+172    	; 0x196c <__clzsi2>
    18c0:	fc 01       	movw	r30, r24
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	f7 ff       	sbrs	r31, 7
    18c6:	3a c0       	rjmp	.+116    	; 0x193c <__floatunsisf+0xb8>
    18c8:	aa 27       	eor	r26, r26
    18ca:	bb 27       	eor	r27, r27
    18cc:	ae 1b       	sub	r26, r30
    18ce:	bf 0b       	sbc	r27, r31
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	0a 2e       	mov	r0, r26
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <__floatunsisf+0x60>
    18dc:	22 0f       	add	r18, r18
    18de:	33 1f       	adc	r19, r19
    18e0:	44 1f       	adc	r20, r20
    18e2:	55 1f       	adc	r21, r21
    18e4:	0a 94       	dec	r0
    18e6:	d2 f7       	brpl	.-12     	; 0x18dc <__floatunsisf+0x58>
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	30 40       	sbci	r19, 0x00	; 0
    18ec:	40 40       	sbci	r20, 0x00	; 0
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	2e 21       	and	r18, r14
    18f2:	3f 21       	and	r19, r15
    18f4:	40 23       	and	r20, r16
    18f6:	51 23       	and	r21, r17
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	21 15       	cp	r18, r1
    1902:	31 05       	cpc	r19, r1
    1904:	41 05       	cpc	r20, r1
    1906:	51 05       	cpc	r21, r1
    1908:	19 f4       	brne	.+6      	; 0x1910 <__floatunsisf+0x8c>
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	cb 01       	movw	r24, r22
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__floatunsisf+0x96>
    1912:	16 95       	lsr	r17
    1914:	07 95       	ror	r16
    1916:	f7 94       	ror	r15
    1918:	e7 94       	ror	r14
    191a:	aa 95       	dec	r26
    191c:	d2 f7       	brpl	.-12     	; 0x1912 <__floatunsisf+0x8e>
    191e:	e6 2a       	or	r14, r22
    1920:	f7 2a       	or	r15, r23
    1922:	08 2b       	or	r16, r24
    1924:	19 2b       	or	r17, r25
    1926:	ed 82       	std	Y+5, r14	; 0x05
    1928:	fe 82       	std	Y+6, r15	; 0x06
    192a:	0f 83       	std	Y+7, r16	; 0x07
    192c:	18 87       	std	Y+8, r17	; 0x08
    192e:	8e e1       	ldi	r24, 0x1E	; 30
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	8e 1b       	sub	r24, r30
    1934:	9f 0b       	sbc	r25, r31
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	12 c0       	rjmp	.+36     	; 0x1960 <__floatunsisf+0xdc>
    193c:	30 97       	sbiw	r30, 0x00	; 0
    193e:	81 f0       	breq	.+32     	; 0x1960 <__floatunsisf+0xdc>
    1940:	0e 2e       	mov	r0, r30
    1942:	04 c0       	rjmp	.+8      	; 0x194c <__floatunsisf+0xc8>
    1944:	ee 0c       	add	r14, r14
    1946:	ff 1c       	adc	r15, r15
    1948:	00 1f       	adc	r16, r16
    194a:	11 1f       	adc	r17, r17
    194c:	0a 94       	dec	r0
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <__floatunsisf+0xc0>
    1950:	ed 82       	std	Y+5, r14	; 0x05
    1952:	fe 82       	std	Y+6, r15	; 0x06
    1954:	0f 83       	std	Y+7, r16	; 0x07
    1956:	18 87       	std	Y+8, r17	; 0x08
    1958:	ce 1a       	sub	r12, r30
    195a:	df 0a       	sbc	r13, r31
    195c:	dc 82       	std	Y+4, r13	; 0x04
    195e:	cb 82       	std	Y+3, r12	; 0x03
    1960:	ce 01       	movw	r24, r28
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	5d d0       	rcall	.+186    	; 0x1a20 <__pack_f>
    1966:	28 96       	adiw	r28, 0x08	; 8
    1968:	e8 e0       	ldi	r30, 0x08	; 8
    196a:	58 c2       	rjmp	.+1200   	; 0x1e1c <__epilogue_restores__+0x14>

0000196c <__clzsi2>:
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	7b 01       	movw	r14, r22
    197e:	8c 01       	movw	r16, r24
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	e8 16       	cp	r14, r24
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	f8 06       	cpc	r15, r24
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	08 07       	cpc	r16, r24
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	18 07       	cpc	r17, r24
    1990:	58 f4       	brcc	.+22     	; 0x19a8 <__clzsi2+0x3c>
    1992:	ef ef       	ldi	r30, 0xFF	; 255
    1994:	ee 16       	cp	r14, r30
    1996:	f1 04       	cpc	r15, r1
    1998:	01 05       	cpc	r16, r1
    199a:	11 05       	cpc	r17, r1
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__clzsi2+0x34>
    199e:	90 f4       	brcc	.+36     	; 0x19c4 <__clzsi2+0x58>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	dc 01       	movw	r26, r24
    19a6:	17 c0       	rjmp	.+46     	; 0x19d6 <__clzsi2+0x6a>
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	ef 16       	cp	r14, r31
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	ff 06       	cpc	r15, r31
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	0f 07       	cpc	r16, r31
    19b4:	f1 e0       	ldi	r31, 0x01	; 1
    19b6:	1f 07       	cpc	r17, r31
    19b8:	50 f4       	brcc	.+20     	; 0x19ce <__clzsi2+0x62>
    19ba:	80 e1       	ldi	r24, 0x10	; 16
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <__clzsi2+0x6a>
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <__clzsi2+0x6a>
    19ce:	88 e1       	ldi	r24, 0x18	; 24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	20 e2       	ldi	r18, 0x20	; 32
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	28 1b       	sub	r18, r24
    19e0:	39 0b       	sbc	r19, r25
    19e2:	4a 0b       	sbc	r20, r26
    19e4:	5b 0b       	sbc	r21, r27
    19e6:	57 01       	movw	r10, r14
    19e8:	68 01       	movw	r12, r16
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <__clzsi2+0x88>
    19ec:	d6 94       	lsr	r13
    19ee:	c7 94       	ror	r12
    19f0:	b7 94       	ror	r11
    19f2:	a7 94       	ror	r10
    19f4:	8a 95       	dec	r24
    19f6:	d2 f7       	brpl	.-12     	; 0x19ec <__clzsi2+0x80>
    19f8:	d6 01       	movw	r26, r12
    19fa:	c5 01       	movw	r24, r10
    19fc:	81 57       	subi	r24, 0x71	; 113
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	fc 01       	movw	r30, r24
    1a02:	80 81       	ld	r24, Z
    1a04:	28 1b       	sub	r18, r24
    1a06:	31 09       	sbc	r19, r1
    1a08:	41 09       	sbc	r20, r1
    1a0a:	51 09       	sbc	r21, r1
    1a0c:	c9 01       	movw	r24, r18
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	08 95       	ret

00001a20 <__pack_f>:
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	24 81       	ldd	r18, Z+4	; 0x04
    1a30:	35 81       	ldd	r19, Z+5	; 0x05
    1a32:	46 81       	ldd	r20, Z+6	; 0x06
    1a34:	57 81       	ldd	r21, Z+7	; 0x07
    1a36:	61 81       	ldd	r22, Z+1	; 0x01
    1a38:	80 81       	ld	r24, Z
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	20 f4       	brcc	.+8      	; 0x1a46 <__pack_f+0x26>
    1a3e:	40 61       	ori	r20, 0x10	; 16
    1a40:	ef ef       	ldi	r30, 0xFF	; 255
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	a3 c0       	rjmp	.+326    	; 0x1b8c <__pack_f+0x16c>
    1a46:	84 30       	cpi	r24, 0x04	; 4
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <__pack_f+0x2c>
    1a4a:	9b c0       	rjmp	.+310    	; 0x1b82 <__pack_f+0x162>
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__pack_f+0x32>
    1a50:	92 c0       	rjmp	.+292    	; 0x1b76 <__pack_f+0x156>
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	41 05       	cpc	r20, r1
    1a58:	51 05       	cpc	r21, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <__pack_f+0x3e>
    1a5c:	8f c0       	rjmp	.+286    	; 0x1b7c <__pack_f+0x15c>
    1a5e:	02 80       	ldd	r0, Z+2	; 0x02
    1a60:	f3 81       	ldd	r31, Z+3	; 0x03
    1a62:	e0 2d       	mov	r30, r0
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	e2 38       	cpi	r30, 0x82	; 130
    1a68:	f8 07       	cpc	r31, r24
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <__pack_f+0x4e>
    1a6c:	5a c0       	rjmp	.+180    	; 0x1b22 <__pack_f+0x102>
    1a6e:	c2 e8       	ldi	r28, 0x82	; 130
    1a70:	df ef       	ldi	r29, 0xFF	; 255
    1a72:	ce 1b       	sub	r28, r30
    1a74:	df 0b       	sbc	r29, r31
    1a76:	ca 31       	cpi	r28, 0x1A	; 26
    1a78:	d1 05       	cpc	r29, r1
    1a7a:	6c f5       	brge	.+90     	; 0x1ad6 <__pack_f+0xb6>
    1a7c:	79 01       	movw	r14, r18
    1a7e:	8a 01       	movw	r16, r20
    1a80:	0c 2e       	mov	r0, r28
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <__pack_f+0x6c>
    1a84:	16 95       	lsr	r17
    1a86:	07 95       	ror	r16
    1a88:	f7 94       	ror	r15
    1a8a:	e7 94       	ror	r14
    1a8c:	0a 94       	dec	r0
    1a8e:	d2 f7       	brpl	.-12     	; 0x1a84 <__pack_f+0x64>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	0c 2e       	mov	r0, r28
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <__pack_f+0x84>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	aa 1f       	adc	r26, r26
    1aa2:	bb 1f       	adc	r27, r27
    1aa4:	0a 94       	dec	r0
    1aa6:	d2 f7       	brpl	.-12     	; 0x1a9c <__pack_f+0x7c>
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	a1 09       	sbc	r26, r1
    1aac:	b1 09       	sbc	r27, r1
    1aae:	82 23       	and	r24, r18
    1ab0:	93 23       	and	r25, r19
    1ab2:	a4 23       	and	r26, r20
    1ab4:	b5 23       	and	r27, r21
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	a1 05       	cpc	r26, r1
    1ac2:	b1 05       	cpc	r27, r1
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <__pack_f+0xac>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	2e 29       	or	r18, r14
    1ace:	3f 29       	or	r19, r15
    1ad0:	40 2b       	or	r20, r16
    1ad2:	51 2b       	or	r21, r17
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <__pack_f+0xbc>
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	a9 01       	movw	r20, r18
    1adc:	da 01       	movw	r26, r20
    1ade:	c9 01       	movw	r24, r18
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	a0 70       	andi	r26, 0x00	; 0
    1ae6:	b0 70       	andi	r27, 0x00	; 0
    1ae8:	80 34       	cpi	r24, 0x40	; 64
    1aea:	91 05       	cpc	r25, r1
    1aec:	a1 05       	cpc	r26, r1
    1aee:	b1 05       	cpc	r27, r1
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <__pack_f+0xe0>
    1af2:	27 ff       	sbrs	r18, 7
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <__pack_f+0xe8>
    1af6:	20 5c       	subi	r18, 0xC0	; 192
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	4f 4f       	sbci	r20, 0xFF	; 255
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <__pack_f+0xe8>
    1b00:	21 5c       	subi	r18, 0xC1	; 193
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	4f 4f       	sbci	r20, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	e1 e0       	ldi	r30, 0x01	; 1
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	20 30       	cpi	r18, 0x00	; 0
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	38 07       	cpc	r19, r24
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	48 07       	cpc	r20, r24
    1b16:	80 e4       	ldi	r24, 0x40	; 64
    1b18:	58 07       	cpc	r21, r24
    1b1a:	28 f5       	brcc	.+74     	; 0x1b66 <__pack_f+0x146>
    1b1c:	e0 e0       	ldi	r30, 0x00	; 0
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	22 c0       	rjmp	.+68     	; 0x1b66 <__pack_f+0x146>
    1b22:	e0 38       	cpi	r30, 0x80	; 128
    1b24:	f1 05       	cpc	r31, r1
    1b26:	6c f5       	brge	.+90     	; 0x1b82 <__pack_f+0x162>
    1b28:	e1 58       	subi	r30, 0x81	; 129
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	da 01       	movw	r26, r20
    1b2e:	c9 01       	movw	r24, r18
    1b30:	8f 77       	andi	r24, 0x7F	; 127
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	a0 70       	andi	r26, 0x00	; 0
    1b36:	b0 70       	andi	r27, 0x00	; 0
    1b38:	80 34       	cpi	r24, 0x40	; 64
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	a1 05       	cpc	r26, r1
    1b3e:	b1 05       	cpc	r27, r1
    1b40:	39 f4       	brne	.+14     	; 0x1b50 <__pack_f+0x130>
    1b42:	27 ff       	sbrs	r18, 7
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <__pack_f+0x138>
    1b46:	20 5c       	subi	r18, 0xC0	; 192
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <__pack_f+0x138>
    1b50:	21 5c       	subi	r18, 0xC1	; 193
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	4f 4f       	sbci	r20, 0xFF	; 255
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	57 ff       	sbrs	r21, 7
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <__pack_f+0x146>
    1b5c:	56 95       	lsr	r21
    1b5e:	47 95       	ror	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	31 96       	adiw	r30, 0x01	; 1
    1b66:	87 e0       	ldi	r24, 0x07	; 7
    1b68:	56 95       	lsr	r21
    1b6a:	47 95       	ror	r20
    1b6c:	37 95       	ror	r19
    1b6e:	27 95       	ror	r18
    1b70:	8a 95       	dec	r24
    1b72:	d1 f7       	brne	.-12     	; 0x1b68 <__pack_f+0x148>
    1b74:	0b c0       	rjmp	.+22     	; 0x1b8c <__pack_f+0x16c>
    1b76:	e0 e0       	ldi	r30, 0x00	; 0
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__pack_f+0x166>
    1b7c:	e0 e0       	ldi	r30, 0x00	; 0
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <__pack_f+0x16c>
    1b82:	ef ef       	ldi	r30, 0xFF	; 255
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	8e 2f       	mov	r24, r30
    1b8e:	87 95       	ror	r24
    1b90:	88 27       	eor	r24, r24
    1b92:	87 95       	ror	r24
    1b94:	94 2f       	mov	r25, r20
    1b96:	9f 77       	andi	r25, 0x7F	; 127
    1b98:	67 95       	ror	r22
    1b9a:	66 27       	eor	r22, r22
    1b9c:	67 95       	ror	r22
    1b9e:	e6 95       	lsr	r30
    1ba0:	e2 2e       	mov	r14, r18
    1ba2:	a9 2f       	mov	r26, r25
    1ba4:	a8 2b       	or	r26, r24
    1ba6:	fe 2f       	mov	r31, r30
    1ba8:	f6 2b       	or	r31, r22
    1baa:	62 2f       	mov	r22, r18
    1bac:	73 2f       	mov	r23, r19
    1bae:	8a 2f       	mov	r24, r26
    1bb0:	9f 2f       	mov	r25, r31
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	e6 e0       	ldi	r30, 0x06	; 6
    1bb8:	33 c1       	rjmp	.+614    	; 0x1e20 <__epilogue_restores__+0x18>

00001bba <__unpack_f>:
    1bba:	dc 01       	movw	r26, r24
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	2c 91       	ld	r18, X
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	3c 91       	ld	r19, X
    1bc4:	11 97       	sbiw	r26, 0x01	; 1
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	8c 91       	ld	r24, X
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	48 2f       	mov	r20, r24
    1bce:	4f 77       	andi	r20, 0x7F	; 127
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	98 2f       	mov	r25, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	99 27       	eor	r25, r25
    1bd8:	99 1f       	adc	r25, r25
    1bda:	13 96       	adiw	r26, 0x03	; 3
    1bdc:	6c 91       	ld	r22, X
    1bde:	13 97       	sbiw	r26, 0x03	; 3
    1be0:	86 2f       	mov	r24, r22
    1be2:	88 0f       	add	r24, r24
    1be4:	89 2b       	or	r24, r25
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	66 1f       	adc	r22, r22
    1bea:	66 27       	eor	r22, r22
    1bec:	66 1f       	adc	r22, r22
    1bee:	61 83       	std	Z+1, r22	; 0x01
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	39 f5       	brne	.+78     	; 0x1c42 <__unpack_f+0x88>
    1bf4:	21 15       	cp	r18, r1
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	41 05       	cpc	r20, r1
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <__unpack_f+0x48>
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	29 c0       	rjmp	.+82     	; 0x1c54 <__unpack_f+0x9a>
    1c02:	82 e8       	ldi	r24, 0x82	; 130
    1c04:	9f ef       	ldi	r25, 0xFF	; 255
    1c06:	93 83       	std	Z+3, r25	; 0x03
    1c08:	82 83       	std	Z+2, r24	; 0x02
    1c0a:	67 e0       	ldi	r22, 0x07	; 7
    1c0c:	22 0f       	add	r18, r18
    1c0e:	33 1f       	adc	r19, r19
    1c10:	44 1f       	adc	r20, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	6a 95       	dec	r22
    1c16:	d1 f7       	brne	.-12     	; 0x1c0c <__unpack_f+0x52>
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	80 83       	st	Z, r24
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <__unpack_f+0x76>
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	44 1f       	adc	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	93 83       	std	Z+3, r25	; 0x03
    1c2e:	82 83       	std	Z+2, r24	; 0x02
    1c30:	20 30       	cpi	r18, 0x00	; 0
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	38 07       	cpc	r19, r24
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	48 07       	cpc	r20, r24
    1c3a:	80 e4       	ldi	r24, 0x40	; 64
    1c3c:	58 07       	cpc	r21, r24
    1c3e:	78 f3       	brcs	.-34     	; 0x1c1e <__unpack_f+0x64>
    1c40:	20 c0       	rjmp	.+64     	; 0x1c82 <__unpack_f+0xc8>
    1c42:	8f 3f       	cpi	r24, 0xFF	; 255
    1c44:	91 05       	cpc	r25, r1
    1c46:	79 f4       	brne	.+30     	; 0x1c66 <__unpack_f+0xac>
    1c48:	21 15       	cp	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	41 05       	cpc	r20, r1
    1c4e:	51 05       	cpc	r21, r1
    1c50:	19 f4       	brne	.+6      	; 0x1c58 <__unpack_f+0x9e>
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	80 83       	st	Z, r24
    1c56:	08 95       	ret
    1c58:	44 ff       	sbrs	r20, 4
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <__unpack_f+0xa8>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 83       	st	Z, r24
    1c60:	10 c0       	rjmp	.+32     	; 0x1c82 <__unpack_f+0xc8>
    1c62:	10 82       	st	Z, r1
    1c64:	0e c0       	rjmp	.+28     	; 0x1c82 <__unpack_f+0xc8>
    1c66:	8f 57       	subi	r24, 0x7F	; 127
    1c68:	90 40       	sbci	r25, 0x00	; 0
    1c6a:	93 83       	std	Z+3, r25	; 0x03
    1c6c:	82 83       	std	Z+2, r24	; 0x02
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	80 83       	st	Z, r24
    1c72:	87 e0       	ldi	r24, 0x07	; 7
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	44 1f       	adc	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	8a 95       	dec	r24
    1c7e:	d1 f7       	brne	.-12     	; 0x1c74 <__unpack_f+0xba>
    1c80:	50 64       	ori	r21, 0x40	; 64
    1c82:	24 83       	std	Z+4, r18	; 0x04
    1c84:	35 83       	std	Z+5, r19	; 0x05
    1c86:	46 83       	std	Z+6, r20	; 0x06
    1c88:	57 83       	std	Z+7, r21	; 0x07
    1c8a:	08 95       	ret

00001c8c <__fpcmp_parts_f>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	db 01       	movw	r26, r22
    1c90:	90 81       	ld	r25, Z
    1c92:	92 30       	cpi	r25, 0x02	; 2
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <__fpcmp_parts_f+0xc>
    1c96:	49 c0       	rjmp	.+146    	; 0x1d2a <__fpcmp_parts_f+0x9e>
    1c98:	8c 91       	ld	r24, X
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <__fpcmp_parts_f+0x14>
    1c9e:	45 c0       	rjmp	.+138    	; 0x1d2a <__fpcmp_parts_f+0x9e>
    1ca0:	94 30       	cpi	r25, 0x04	; 4
    1ca2:	51 f4       	brne	.+20     	; 0x1cb8 <__fpcmp_parts_f+0x2c>
    1ca4:	61 81       	ldd	r22, Z+1	; 0x01
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	b1 f5       	brne	.+108    	; 0x1d16 <__fpcmp_parts_f+0x8a>
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	2c 91       	ld	r18, X
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	26 1b       	sub	r18, r22
    1cb4:	31 09       	sbc	r19, r1
    1cb6:	41 c0       	rjmp	.+130    	; 0x1d3a <__fpcmp_parts_f+0xae>
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	21 f0       	breq	.+8      	; 0x1cc4 <__fpcmp_parts_f+0x38>
    1cbc:	92 30       	cpi	r25, 0x02	; 2
    1cbe:	41 f4       	brne	.+16     	; 0x1cd0 <__fpcmp_parts_f+0x44>
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	b1 f1       	breq	.+108    	; 0x1d30 <__fpcmp_parts_f+0xa4>
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	8c 91       	ld	r24, X
    1cc8:	11 97       	sbiw	r26, 0x01	; 1
    1cca:	88 23       	and	r24, r24
    1ccc:	a1 f1       	breq	.+104    	; 0x1d36 <__fpcmp_parts_f+0xaa>
    1cce:	2d c0       	rjmp	.+90     	; 0x1d2a <__fpcmp_parts_f+0x9e>
    1cd0:	61 81       	ldd	r22, Z+1	; 0x01
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	01 f1       	breq	.+64     	; 0x1d16 <__fpcmp_parts_f+0x8a>
    1cd6:	11 96       	adiw	r26, 0x01	; 1
    1cd8:	8c 91       	ld	r24, X
    1cda:	11 97       	sbiw	r26, 0x01	; 1
    1cdc:	68 17       	cp	r22, r24
    1cde:	d9 f4       	brne	.+54     	; 0x1d16 <__fpcmp_parts_f+0x8a>
    1ce0:	22 81       	ldd	r18, Z+2	; 0x02
    1ce2:	33 81       	ldd	r19, Z+3	; 0x03
    1ce4:	12 96       	adiw	r26, 0x02	; 2
    1ce6:	8d 91       	ld	r24, X+
    1ce8:	9c 91       	ld	r25, X
    1cea:	13 97       	sbiw	r26, 0x03	; 3
    1cec:	82 17       	cp	r24, r18
    1cee:	93 07       	cpc	r25, r19
    1cf0:	94 f0       	brlt	.+36     	; 0x1d16 <__fpcmp_parts_f+0x8a>
    1cf2:	28 17       	cp	r18, r24
    1cf4:	39 07       	cpc	r19, r25
    1cf6:	bc f0       	brlt	.+46     	; 0x1d26 <__fpcmp_parts_f+0x9a>
    1cf8:	24 81       	ldd	r18, Z+4	; 0x04
    1cfa:	35 81       	ldd	r19, Z+5	; 0x05
    1cfc:	46 81       	ldd	r20, Z+6	; 0x06
    1cfe:	57 81       	ldd	r21, Z+7	; 0x07
    1d00:	14 96       	adiw	r26, 0x04	; 4
    1d02:	8d 91       	ld	r24, X+
    1d04:	9d 91       	ld	r25, X+
    1d06:	0d 90       	ld	r0, X+
    1d08:	bc 91       	ld	r27, X
    1d0a:	a0 2d       	mov	r26, r0
    1d0c:	82 17       	cp	r24, r18
    1d0e:	93 07       	cpc	r25, r19
    1d10:	a4 07       	cpc	r26, r20
    1d12:	b5 07       	cpc	r27, r21
    1d14:	18 f4       	brcc	.+6      	; 0x1d1c <__fpcmp_parts_f+0x90>
    1d16:	66 23       	and	r22, r22
    1d18:	41 f0       	breq	.+16     	; 0x1d2a <__fpcmp_parts_f+0x9e>
    1d1a:	0d c0       	rjmp	.+26     	; 0x1d36 <__fpcmp_parts_f+0xaa>
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	4a 07       	cpc	r20, r26
    1d22:	5b 07       	cpc	r21, r27
    1d24:	28 f4       	brcc	.+10     	; 0x1d30 <__fpcmp_parts_f+0xa4>
    1d26:	66 23       	and	r22, r22
    1d28:	31 f0       	breq	.+12     	; 0x1d36 <__fpcmp_parts_f+0xaa>
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <__fpcmp_parts_f+0xae>
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <__fpcmp_parts_f+0xae>
    1d36:	2f ef       	ldi	r18, 0xFF	; 255
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	08 95       	ret

00001d3e <__udivmodhi4>:
    1d3e:	aa 1b       	sub	r26, r26
    1d40:	bb 1b       	sub	r27, r27
    1d42:	51 e1       	ldi	r21, 0x11	; 17
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <__udivmodhi4_ep>

00001d46 <__udivmodhi4_loop>:
    1d46:	aa 1f       	adc	r26, r26
    1d48:	bb 1f       	adc	r27, r27
    1d4a:	a6 17       	cp	r26, r22
    1d4c:	b7 07       	cpc	r27, r23
    1d4e:	10 f0       	brcs	.+4      	; 0x1d54 <__udivmodhi4_ep>
    1d50:	a6 1b       	sub	r26, r22
    1d52:	b7 0b       	sbc	r27, r23

00001d54 <__udivmodhi4_ep>:
    1d54:	88 1f       	adc	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	5a 95       	dec	r21
    1d5a:	a9 f7       	brne	.-22     	; 0x1d46 <__udivmodhi4_loop>
    1d5c:	80 95       	com	r24
    1d5e:	90 95       	com	r25
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	08 95       	ret

00001d66 <__divmodhi4>:
    1d66:	97 fb       	bst	r25, 7
    1d68:	09 2e       	mov	r0, r25
    1d6a:	07 26       	eor	r0, r23
    1d6c:	0a d0       	rcall	.+20     	; 0x1d82 <__divmodhi4_neg1>
    1d6e:	77 fd       	sbrc	r23, 7
    1d70:	04 d0       	rcall	.+8      	; 0x1d7a <__divmodhi4_neg2>
    1d72:	e5 df       	rcall	.-54     	; 0x1d3e <__udivmodhi4>
    1d74:	06 d0       	rcall	.+12     	; 0x1d82 <__divmodhi4_neg1>
    1d76:	00 20       	and	r0, r0
    1d78:	1a f4       	brpl	.+6      	; 0x1d80 <__divmodhi4_exit>

00001d7a <__divmodhi4_neg2>:
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255

00001d80 <__divmodhi4_exit>:
    1d80:	08 95       	ret

00001d82 <__divmodhi4_neg1>:
    1d82:	f6 f7       	brtc	.-4      	; 0x1d80 <__divmodhi4_exit>
    1d84:	90 95       	com	r25
    1d86:	81 95       	neg	r24
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	08 95       	ret

00001d8c <__udivmodsi4>:
    1d8c:	a1 e2       	ldi	r26, 0x21	; 33
    1d8e:	1a 2e       	mov	r1, r26
    1d90:	aa 1b       	sub	r26, r26
    1d92:	bb 1b       	sub	r27, r27
    1d94:	fd 01       	movw	r30, r26
    1d96:	0d c0       	rjmp	.+26     	; 0x1db2 <__udivmodsi4_ep>

00001d98 <__udivmodsi4_loop>:
    1d98:	aa 1f       	adc	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	ee 1f       	adc	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	a2 17       	cp	r26, r18
    1da2:	b3 07       	cpc	r27, r19
    1da4:	e4 07       	cpc	r30, r20
    1da6:	f5 07       	cpc	r31, r21
    1da8:	20 f0       	brcs	.+8      	; 0x1db2 <__udivmodsi4_ep>
    1daa:	a2 1b       	sub	r26, r18
    1dac:	b3 0b       	sbc	r27, r19
    1dae:	e4 0b       	sbc	r30, r20
    1db0:	f5 0b       	sbc	r31, r21

00001db2 <__udivmodsi4_ep>:
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	1a 94       	dec	r1
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <__udivmodsi4_loop>
    1dbe:	60 95       	com	r22
    1dc0:	70 95       	com	r23
    1dc2:	80 95       	com	r24
    1dc4:	90 95       	com	r25
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	bd 01       	movw	r22, r26
    1dcc:	cf 01       	movw	r24, r30
    1dce:	08 95       	ret

00001dd0 <__prologue_saves__>:
    1dd0:	2f 92       	push	r2
    1dd2:	3f 92       	push	r3
    1dd4:	4f 92       	push	r4
    1dd6:	5f 92       	push	r5
    1dd8:	6f 92       	push	r6
    1dda:	7f 92       	push	r7
    1ddc:	8f 92       	push	r8
    1dde:	9f 92       	push	r9
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	ca 1b       	sub	r28, r26
    1dfa:	db 0b       	sbc	r29, r27
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	09 94       	ijmp

00001e08 <__epilogue_restores__>:
    1e08:	2a 88       	ldd	r2, Y+18	; 0x12
    1e0a:	39 88       	ldd	r3, Y+17	; 0x11
    1e0c:	48 88       	ldd	r4, Y+16	; 0x10
    1e0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e10:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e12:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e14:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e16:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e18:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e1a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e1c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e1e:	df 80       	ldd	r13, Y+7	; 0x07
    1e20:	ee 80       	ldd	r14, Y+6	; 0x06
    1e22:	fd 80       	ldd	r15, Y+5	; 0x05
    1e24:	0c 81       	ldd	r16, Y+4	; 0x04
    1e26:	1b 81       	ldd	r17, Y+3	; 0x03
    1e28:	aa 81       	ldd	r26, Y+2	; 0x02
    1e2a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e2c:	ce 0f       	add	r28, r30
    1e2e:	d1 1d       	adc	r29, r1
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	ed 01       	movw	r28, r26
    1e3c:	08 95       	ret

00001e3e <memset>:
    1e3e:	dc 01       	movw	r26, r24
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <memset+0x6>
    1e42:	6d 93       	st	X+, r22
    1e44:	41 50       	subi	r20, 0x01	; 1
    1e46:	50 40       	sbci	r21, 0x00	; 0
    1e48:	e0 f7       	brcc	.-8      	; 0x1e42 <memset+0x4>
    1e4a:	08 95       	ret

00001e4c <__eerd_block_m8>:
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22

00001e50 <__eerd_blraw_m8>:
    1e50:	fc 01       	movw	r30, r24
    1e52:	e1 99       	sbic	0x1c, 1	; 28
    1e54:	fe cf       	rjmp	.-4      	; 0x1e52 <__eerd_blraw_m8+0x2>
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <__eerd_blraw_m8+0x14>
    1e58:	ff bb       	out	0x1f, r31	; 31
    1e5a:	ee bb       	out	0x1e, r30	; 30
    1e5c:	e0 9a       	sbi	0x1c, 0	; 28
    1e5e:	31 96       	adiw	r30, 0x01	; 1
    1e60:	0d b2       	in	r0, 0x1d	; 29
    1e62:	0d 92       	st	X+, r0
    1e64:	41 50       	subi	r20, 0x01	; 1
    1e66:	50 40       	sbci	r21, 0x00	; 0
    1e68:	b8 f7       	brcc	.-18     	; 0x1e58 <__eerd_blraw_m8+0x8>
    1e6a:	08 95       	ret

00001e6c <__eeupd_block_m8>:
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	a4 0f       	add	r26, r20
    1e70:	b5 1f       	adc	r27, r21
    1e72:	41 50       	subi	r20, 0x01	; 1
    1e74:	50 40       	sbci	r21, 0x00	; 0
    1e76:	40 f0       	brcs	.+16     	; 0x1e88 <__eeupd_block_m8+0x1c>
    1e78:	cb 01       	movw	r24, r22
    1e7a:	84 0f       	add	r24, r20
    1e7c:	95 1f       	adc	r25, r21
    1e7e:	2e 91       	ld	r18, -X
    1e80:	05 d0       	rcall	.+10     	; 0x1e8c <__eeupd_r18_m8>
    1e82:	41 50       	subi	r20, 0x01	; 1
    1e84:	50 40       	sbci	r21, 0x00	; 0
    1e86:	d8 f7       	brcc	.-10     	; 0x1e7e <__eeupd_block_m8+0x12>
    1e88:	08 95       	ret

00001e8a <__eeupd_byte_m8>:
    1e8a:	26 2f       	mov	r18, r22

00001e8c <__eeupd_r18_m8>:
    1e8c:	e1 99       	sbic	0x1c, 1	; 28
    1e8e:	fe cf       	rjmp	.-4      	; 0x1e8c <__eeupd_r18_m8>
    1e90:	9f bb       	out	0x1f, r25	; 31
    1e92:	8e bb       	out	0x1e, r24	; 30
    1e94:	e0 9a       	sbi	0x1c, 0	; 28
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	0d b2       	in	r0, 0x1d	; 29
    1e9a:	02 16       	cp	r0, r18
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <__eeupd_r18_m8+0x1e>
    1e9e:	2d bb       	out	0x1d, r18	; 29
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	e2 9a       	sbi	0x1c, 2	; 28
    1ea6:	e1 9a       	sbi	0x1c, 1	; 28
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	08 95       	ret

00001eac <_exit>:
    1eac:	f8 94       	cli

00001eae <__stop_program>:
    1eae:	ff cf       	rjmp	.-2      	; 0x1eae <__stop_program>
